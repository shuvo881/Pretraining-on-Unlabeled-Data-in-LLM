{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6718adfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:14.325524Z",
     "iopub.status.busy": "2024-05-21T10:05:14.325144Z",
     "iopub.status.idle": "2024-05-21T10:05:14.337141Z",
     "shell.execute_reply": "2024-05-21T10:05:14.336227Z"
    },
    "papermill": {
     "duration": 0.043644,
     "end_time": "2024-05-21T10:05:14.339048",
     "exception": false,
     "start_time": "2024-05-21T10:05:14.295404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "GPT_CONFIG_124M = {\n",
    "    'vocab_size': 50257,   # Vucabulary Size\n",
    "    'ctx_len': 256,       # Context Lenghts\n",
    "    'emb_dim': 768,        # Embedding dimennsion\n",
    "    'n_heads': 12,         # Number of attention head\n",
    "    'n_layers': 12,        # number of Layer\n",
    "    'drop_rate': 0.1,      # Dropout rate\n",
    "    'qkv_bias': False      # Query_Key_value Bias\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "61695c86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:14.397506Z",
     "iopub.status.busy": "2024-05-21T10:05:14.396888Z",
     "iopub.status.idle": "2024-05-21T10:05:28.059369Z",
     "shell.execute_reply": "2024-05-21T10:05:28.058271Z"
    },
    "papermill": {
     "duration": 13.693585,
     "end_time": "2024-05-21T10:05:28.061779",
     "exception": false,
     "start_time": "2024-05-21T10:05:14.368194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tiktoken\r\n",
      "  Downloading tiktoken-0.7.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\r\n",
      "Requirement already satisfied: regex>=2022.1.18 in /opt/conda/lib/python3.10/site-packages (from tiktoken) (2023.12.25)\r\n",
      "Requirement already satisfied: requests>=2.26.0 in /opt/conda/lib/python3.10/site-packages (from tiktoken) (2.31.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (2024.2.2)\r\n",
      "Downloading tiktoken-0.7.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tiktoken\r\n",
      "Successfully installed tiktoken-0.7.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tiktoken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dd14e92",
   "metadata": {
    "papermill": {
     "duration": 0.029129,
     "end_time": "2024-05-21T10:05:28.121777",
     "exception": false,
     "start_time": "2024-05-21T10:05:28.092648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "835b19a2",
   "metadata": {
    "papermill": {
     "duration": 0.029025,
     "end_time": "2024-05-21T10:05:28.180187",
     "exception": false,
     "start_time": "2024-05-21T10:05:28.151162",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Normalizing activations with layer normalization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ffa1f07",
   "metadata": {
    "papermill": {
     "duration": 0.028753,
     "end_time": "2024-05-21T10:05:28.238307",
     "exception": false,
     "start_time": "2024-05-21T10:05:28.209554",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A layer Normalization class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8fc3444",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:28.298587Z",
     "iopub.status.busy": "2024-05-21T10:05:28.297641Z",
     "iopub.status.idle": "2024-05-21T10:05:31.953988Z",
     "shell.execute_reply": "2024-05-21T10:05:31.953165Z"
    },
    "papermill": {
     "duration": 3.689039,
     "end_time": "2024-05-21T10:05:31.956357",
     "exception": false,
     "start_time": "2024-05-21T10:05:28.267318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "\n",
    "class LayerNorm(nn.Module):\n",
    "    def __init__(self, emb_dim):\n",
    "        super().__init__()\n",
    "        self.eps = 1e-5\n",
    "        self.scale = nn.Parameter(torch.ones(emb_dim))\n",
    "        self.shift = nn.Parameter(torch.zeros(emb_dim))        \n",
    "        \n",
    "    def forward(self, x):\n",
    "        mean = x.mean(dim=-1, keepdim=True)\n",
    "        var = x.var(dim=-1, keepdim=True, unbiased=False)\n",
    "        \n",
    "        norm_x = (x - mean) / torch.sqrt(var + self.eps)\n",
    "        return self.scale * norm_x + self.shift"
   ]
  },
  {
   "attachments": {
    "251c4c3d-22ee-45d0-81c6-7029e525dbac.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "ec1d8b40",
   "metadata": {
    "papermill": {
     "duration": 0.028276,
     "end_time": "2024-05-21T10:05:32.014739",
     "exception": false,
     "start_time": "2024-05-21T10:05:31.986463",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# An implementation od the GELU activation function\n",
    "\n",
    "![GELU activation function.png](attachment:251c4c3d-22ee-45d0-81c6-7029e525dbac.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "91df9084",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.074820Z",
     "iopub.status.busy": "2024-05-21T10:05:32.074336Z",
     "iopub.status.idle": "2024-05-21T10:05:32.080339Z",
     "shell.execute_reply": "2024-05-21T10:05:32.079309Z"
    },
    "papermill": {
     "duration": 0.038839,
     "end_time": "2024-05-21T10:05:32.082357",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.043518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GELU(nn.Module):\n",
    "    def __init__(self,):\n",
    "        super().__init__()\n",
    "        \n",
    "    \n",
    "    def forward(self, x):\n",
    "        return 0.5 * x * (1 + torch.tanh(torch.sqrt(torch.tensor(2.0 / torch.pi)) * (x + 0.044715 * torch.pow(x, 3))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba967032",
   "metadata": {
    "papermill": {
     "duration": 0.027923,
     "end_time": "2024-05-21T10:05:32.138840",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.110917",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A feed forward nural network module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c1bb3904",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.239601Z",
     "iopub.status.busy": "2024-05-21T10:05:32.238707Z",
     "iopub.status.idle": "2024-05-21T10:05:32.244970Z",
     "shell.execute_reply": "2024-05-21T10:05:32.244131Z"
    },
    "papermill": {
     "duration": 0.079823,
     "end_time": "2024-05-21T10:05:32.246884",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.167061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Linear(cfg['emb_dim'], 4 * cfg['emb_dim']),\n",
    "            GELU(),\n",
    "            nn.Linear(4 * cfg['emb_dim'], cfg['emb_dim']),\n",
    "            nn.Dropout(cfg['drop_rate'])\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.layers(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8421c6ab",
   "metadata": {
    "papermill": {
     "duration": 0.028898,
     "end_time": "2024-05-21T10:05:32.304128",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.275230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# compute gradients in the models backward pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5dfdfd01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.362238Z",
     "iopub.status.busy": "2024-05-21T10:05:32.361851Z",
     "iopub.status.idle": "2024-05-21T10:05:32.367663Z",
     "shell.execute_reply": "2024-05-21T10:05:32.366800Z"
    },
    "papermill": {
     "duration": 0.037198,
     "end_time": "2024-05-21T10:05:32.369634",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.332436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def print_gradients(model, x):\n",
    "    # forward pass\n",
    "    output = model(x)\n",
    "    target = torch.tensor([0.])\n",
    "    \n",
    "    # calculate loss based on how close the target and output are\n",
    "    loss = nn.MSELoss()\n",
    "    loss = loss(output, target)\n",
    "    \n",
    "    # Backward pass to calculate the gradients\n",
    "    loss.backward()\n",
    "    \n",
    "    for name, param in model.named_parameters():\n",
    "        if 'weight' in name:\n",
    "            # print the mean absolute gradient of the weights\n",
    "            print(f'{name} has gradient mean of {param.grad.abs().mean().item()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d700cc3",
   "metadata": {
    "papermill": {
     "duration": 0.027954,
     "end_time": "2024-05-21T10:05:32.425544",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.397590",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Connecting attention and linear layers in a transformer block"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77ce383f",
   "metadata": {
    "papermill": {
     "duration": 0.028053,
     "end_time": "2024-05-21T10:05:32.481677",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.453624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Multi-head attention layer:\n",
    "\n",
    "\n",
    "[more](https://www.kaggle.com/code/golammostofas/details-attention-mechanism-for-llm#4.2-An-Efficent-Multi-head-attention-class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9f9e690",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.539446Z",
     "iopub.status.busy": "2024-05-21T10:05:32.539051Z",
     "iopub.status.idle": "2024-05-21T10:05:32.552106Z",
     "shell.execute_reply": "2024-05-21T10:05:32.551177Z"
    },
    "papermill": {
     "duration": 0.044322,
     "end_time": "2024-05-21T10:05:32.554133",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.509811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "class MultiHeadAttention(nn.Module):\n",
    "    def __init__(self, d_in, d_out, block_size, dropout, num_heads, qkv_bias=False):\n",
    "        super().__init__()\n",
    "        assert d_out % num_heads == 0 # d_out must be divisible by n_heads\n",
    "        \n",
    "        self.d_out = d_out\n",
    "        self.num_heads = num_heads\n",
    "        self.head_dim = d_out // num_heads\n",
    "        self.W_query = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        self.W_key = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        self.W_value = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        \n",
    "        self.out_proj = nn.Linear(d_out, d_out)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        self.register_buffer(\n",
    "            'mask',\n",
    "            torch.triu(torch.ones(block_size, block_size), diagonal=1)\n",
    "        )\n",
    "        \n",
    "        \n",
    "    def forward(self, x):\n",
    "        b, num_tokens, d_in = x.shape\n",
    "        \n",
    "        queries = self.W_query(x)\n",
    "        keys = self.W_key(x)\n",
    "        values = self.W_value(x)\n",
    "        \n",
    "        keys = keys.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        queries = queries.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        values = values.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        \n",
    "        keys = keys.transpose(1, 2)\n",
    "        queries = queries.transpose(1, 2)\n",
    "        values = values.transpose(1, 2)\n",
    "        \n",
    "        attn_scores = queries @ keys.transpose(2, 3)\n",
    "        \n",
    "        mask_bool = self.mask.bool()[:num_tokens, :num_tokens]\n",
    "        mask_unsqueezed = mask_bool.unsqueeze(0).unsqueeze(0)\n",
    "        attn_scores.masked_fill_(mask_unsqueezed, -torch.inf)\n",
    "        \n",
    "        attn_weights = torch.softmax(attn_scores / keys.shape[-1] ** 0.5, dim=-1)\n",
    "        \n",
    "        attn_weights = self.dropout(attn_weights)\n",
    "        \n",
    "        context_vec = (attn_weights @ values).transpose(1, 2)\n",
    "        context_vec = context_vec.contiguous().view(b, num_tokens, self.d_out)\n",
    "        context_vec = self.out_proj(context_vec)\n",
    "        \n",
    "        return context_vec"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d514c3d3",
   "metadata": {
    "papermill": {
     "duration": 0.029135,
     "end_time": "2024-05-21T10:05:32.610889",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.581754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## the transformer block components of GPT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "edd71672",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.671498Z",
     "iopub.status.busy": "2024-05-21T10:05:32.670859Z",
     "iopub.status.idle": "2024-05-21T10:05:32.679431Z",
     "shell.execute_reply": "2024-05-21T10:05:32.678394Z"
    },
    "papermill": {
     "duration": 0.041733,
     "end_time": "2024-05-21T10:05:32.681313",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.639580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerBlock(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.att = MultiHeadAttention(\n",
    "            d_in=cfg['emb_dim'],\n",
    "            d_out=cfg['emb_dim'],\n",
    "            block_size=cfg['ctx_len'],\n",
    "            num_heads=cfg['n_heads'],\n",
    "            dropout=cfg['drop_rate'],\n",
    "            qkv_bias=cfg['qkv_bias'],\n",
    "        )\n",
    "        \n",
    "        self.ff = FeedForward(cfg)\n",
    "        self.norm1 = LayerNorm(cfg['emb_dim'])\n",
    "        self.norm2 = LayerNorm(cfg['emb_dim'])\n",
    "        self.drop_resid = nn.Dropout(cfg['drop_rate'])\n",
    "    \n",
    "    def forward(self, x):\n",
    "        shortcut = x\n",
    "        x = self.norm1(x)\n",
    "        x = self.att(x)\n",
    "        x = self.drop_resid(x)\n",
    "        x = x + shortcut # Add the original input back\n",
    "        \n",
    "        shortcut = x\n",
    "        x = self.norm2(x)\n",
    "        x = self.ff(x)\n",
    "        x = self.drop_resid(x)\n",
    "        x = x + shortcut\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1aac1d5d",
   "metadata": {
    "papermill": {
     "duration": 0.028778,
     "end_time": "2024-05-21T10:05:32.738496",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.709718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The GPT model architecture implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb63312c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.797385Z",
     "iopub.status.busy": "2024-05-21T10:05:32.796464Z",
     "iopub.status.idle": "2024-05-21T10:05:32.805604Z",
     "shell.execute_reply": "2024-05-21T10:05:32.804678Z"
    },
    "papermill": {
     "duration": 0.040697,
     "end_time": "2024-05-21T10:05:32.807483",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.766786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GPTModel(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.tok_emb = nn.Embedding(cfg['vocab_size'], cfg['emb_dim'])\n",
    "        self.pos_emb = nn.Embedding(cfg['ctx_len'], cfg['emb_dim'])\n",
    "        self.drop_emb = nn.Dropout(cfg['drop_rate'])\n",
    "        \n",
    "        self.trf_blocks = nn.Sequential(\n",
    "            *[TransformerBlock(cfg) for _ in range(cfg['n_layers'])]\n",
    "        )                                                                                   #A\n",
    "        \n",
    "        self.final_norm = LayerNorm(cfg['emb_dim'])                                        #B\n",
    "        self.out_head = nn.Linear(cfg['emb_dim'], cfg['vocab_size'], bias=False)\n",
    "        \n",
    "        \n",
    "    def forward(self, in_idx):\n",
    "        batch_size, seq_len = in_idx.shape\n",
    "        tok_embeds = self.tok_emb(in_idx)\n",
    "        pos_embeds = self.pos_emb(torch.arange(seq_len, device=in_idx.device))\n",
    "        x = tok_embeds + pos_embeds\n",
    "        \n",
    "        x = self.drop_emb(x)\n",
    "        x = self.trf_blocks(x)\n",
    "        x = self.final_norm(x)\n",
    "        logits = self.out_head(x)\n",
    "\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3dc1a444",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.865899Z",
     "iopub.status.busy": "2024-05-21T10:05:32.865112Z",
     "iopub.status.idle": "2024-05-21T10:05:32.869425Z",
     "shell.execute_reply": "2024-05-21T10:05:32.868520Z"
    },
    "papermill": {
     "duration": 0.036042,
     "end_time": "2024-05-21T10:05:32.871424",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.835382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "34cbec92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:32.929894Z",
     "iopub.status.busy": "2024-05-21T10:05:32.929045Z",
     "iopub.status.idle": "2024-05-21T10:05:34.647586Z",
     "shell.execute_reply": "2024-05-21T10:05:34.646592Z"
    },
    "papermill": {
     "duration": 1.750143,
     "end_time": "2024-05-21T10:05:34.650065",
     "exception": false,
     "start_time": "2024-05-21T10:05:32.899922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.manual_seed(123)\n",
    "model = GPTModel(GPT_CONFIG_124M)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7e01ac8",
   "metadata": {
    "papermill": {
     "duration": 0.027907,
     "end_time": "2024-05-21T10:05:34.706415",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.678508",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Analysis Model Architecture and Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ddcdf832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:34.765136Z",
     "iopub.status.busy": "2024-05-21T10:05:34.764181Z",
     "iopub.status.idle": "2024-05-21T10:05:34.770785Z",
     "shell.execute_reply": "2024-05-21T10:05:34.769968Z"
    },
    "papermill": {
     "duration": 0.038077,
     "end_time": "2024-05-21T10:05:34.772854",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.734777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of parameters: 162,419,712\n"
     ]
    }
   ],
   "source": [
    "total_params = sum(p.numel() for p in model.parameters())\n",
    "print(f\"Total number of parameters: {total_params:,}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "962d5cc6",
   "metadata": {
    "papermill": {
     "duration": 0.027511,
     "end_time": "2024-05-21T10:05:34.828129",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.800618",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Curious we spoke of ninitializing a 124 million parameter CPT model so why is the actial number of parameters 163 million, as shown in the preceding code output?\n",
    "\n",
    "\n",
    "The reason is a concept called weight tying that is used in the original GPT-2 architecture, which means that the original GPT - 2 architecture is reusing the token embedding layer as its output layer. \n",
    "To understand what this means, let's take a look at the shapes of the token embedding layer and linear output layer that we initialized on the model via the GPTModel earlier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b5e693f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:34.886552Z",
     "iopub.status.busy": "2024-05-21T10:05:34.885639Z",
     "iopub.status.idle": "2024-05-21T10:05:34.891018Z",
     "shell.execute_reply": "2024-05-21T10:05:34.890082Z"
    },
    "papermill": {
     "duration": 0.036922,
     "end_time": "2024-05-21T10:05:34.893063",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.856141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Token embedding layer shape:  torch.Size([50257, 768])\n",
      "Out layer shape:  torch.Size([50257, 768])\n"
     ]
    }
   ],
   "source": [
    "print('Token embedding layer shape: ', model.tok_emb.weight.shape)\n",
    "print('Out layer shape: ', model.out_head.weight.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f510e309",
   "metadata": {
    "papermill": {
     "duration": 0.02906,
     "end_time": "2024-05-21T10:05:34.950481",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.921421",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see based on the print outputs, the weight tensors for both these layers have the same shape.\n",
    "\n",
    "\n",
    "The token embedding and output layers are vary large due to the number of rows for the 50,257 in the tokenizer's vocabulary. Let's remove the output layer parameter count from the total GPT-2 model count according to the weight typing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8b30b100",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:35.011959Z",
     "iopub.status.busy": "2024-05-21T10:05:35.011181Z",
     "iopub.status.idle": "2024-05-21T10:05:35.016354Z",
     "shell.execute_reply": "2024-05-21T10:05:35.015459Z"
    },
    "papermill": {
     "duration": 0.039234,
     "end_time": "2024-05-21T10:05:35.018710",
     "exception": false,
     "start_time": "2024-05-21T10:05:34.979476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trainable parameters considering weight tying:  123822336\n"
     ]
    }
   ],
   "source": [
    "total_params_gpt2 = total_params - sum(p.numel() for p in model.out_head.parameters())\n",
    "print(f'Number of trainable parameters considering weight tying: ', total_params_gpt2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ab4d3c9",
   "metadata": {
    "papermill": {
     "duration": 0.02802,
     "end_time": "2024-05-21T10:05:35.075611",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.047591",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see, the model is now only 124 million parameters large, matching the original size of the GPT-2 model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d11a9bf",
   "metadata": {
    "papermill": {
     "duration": 0.027532,
     "end_time": "2024-05-21T10:05:35.131174",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.103642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Compute the memory requirements of the 163 million parameters in our GPTModel object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5f0af3e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:35.189537Z",
     "iopub.status.busy": "2024-05-21T10:05:35.188663Z",
     "iopub.status.idle": "2024-05-21T10:05:35.194014Z",
     "shell.execute_reply": "2024-05-21T10:05:35.193115Z"
    },
    "papermill": {
     "duration": 0.037056,
     "end_time": "2024-05-21T10:05:35.196021",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.158965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total size of the model:  619.58 MB\n"
     ]
    }
   ],
   "source": [
    "total_size_bytes = total_params * 4\n",
    "total_size_mb = total_size_bytes / (1024 * 1024)\n",
    "\n",
    "print(f'Total size of the model: {total_size_mb: .2f} MB')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4367febc",
   "metadata": {
    "papermill": {
     "duration": 0.028296,
     "end_time": "2024-05-21T10:05:35.252755",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.224459",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Implement the token generation process as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "79b582e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:35.312341Z",
     "iopub.status.busy": "2024-05-21T10:05:35.311954Z",
     "iopub.status.idle": "2024-05-21T10:05:35.318322Z",
     "shell.execute_reply": "2024-05-21T10:05:35.317423Z"
    },
    "papermill": {
     "duration": 0.038506,
     "end_time": "2024-05-21T10:05:35.320256",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.281750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_text_simple(model, idx, max_new_tokens, context_size):\n",
    "    while max_new_tokens:\n",
    "        idx_cond = idx[:, -context_size:]\n",
    "        with torch.no_grad():\n",
    "            logits = model(idx_cond)\n",
    "        \n",
    "        logits = logits[:, -1, :]\n",
    "        probas = torch.softmax(logits, dim=-1)\n",
    "        idx_next = torch.argmax(probas, dim=-1, keepdim=True)\n",
    "        \n",
    "        idx = torch.cat((idx, idx_next), dim=1)\n",
    "        \n",
    "        max_new_tokens -= 1\n",
    "    \n",
    "    return idx\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0fca3f8",
   "metadata": {
    "papermill": {
     "duration": 0.027913,
     "end_time": "2024-05-21T10:05:35.376621",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.348708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Utility functions for text to token ID conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "83e67b6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:35.434290Z",
     "iopub.status.busy": "2024-05-21T10:05:35.433603Z",
     "iopub.status.idle": "2024-05-21T10:05:38.308390Z",
     "shell.execute_reply": "2024-05-21T10:05:38.307456Z"
    },
    "papermill": {
     "duration": 2.906007,
     "end_time": "2024-05-21T10:05:38.310506",
     "exception": false,
     "start_time": "2024-05-21T10:05:35.404499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output text:\n",
      " Every effort moves youEvery feminists Sadfell plotanse socio pioneeringAdjust infants\n"
     ]
    }
   ],
   "source": [
    "import tiktoken\n",
    "\n",
    "def text_to_token_ids(text, tokenizer):\n",
    "    encoded = tokenizer.encode(text, allowed_special={'<|endoftext|>'})\n",
    "    encoded_tensor = torch.tensor(encoded).unsqueeze(0) # add batch dimension\n",
    "    return encoded_tensor\n",
    " \n",
    "def token_ids_to_text(token_ids, tokenizer):\n",
    "    flat = token_ids.squeeze(0) # remove batch dimension\n",
    "    return tokenizer.decode(flat.tolist())\n",
    " \n",
    "start_context = \"Every effort moves you\"\n",
    "tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
    " \n",
    "token_ids = generate_text_simple(\n",
    "    model=model,\n",
    "    idx=text_to_token_ids(start_context, tokenizer),\n",
    "    max_new_tokens=10,\n",
    "    context_size=GPT_CONFIG_124M[\"ctx_len\"]\n",
    ")\n",
    "print(\"Output text:\\n\", token_ids_to_text(token_ids, tokenizer))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7fb4a2c",
   "metadata": {
    "papermill": {
     "duration": 0.027938,
     "end_time": "2024-05-21T10:05:38.366946",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.339008",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculating the text generation loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b7db3b50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.425391Z",
     "iopub.status.busy": "2024-05-21T10:05:38.424636Z",
     "iopub.status.idle": "2024-05-21T10:05:38.433405Z",
     "shell.execute_reply": "2024-05-21T10:05:38.432530Z"
    },
    "papermill": {
     "duration": 0.04005,
     "end_time": "2024-05-21T10:05:38.435214",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.395164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 1107,   588, 11311]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_to_token_ids(' really like chocolate', tokenizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fc7805d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.494280Z",
     "iopub.status.busy": "2024-05-21T10:05:38.493456Z",
     "iopub.status.idle": "2024-05-21T10:05:38.498835Z",
     "shell.execute_reply": "2024-05-21T10:05:38.497958Z"
    },
    "papermill": {
     "duration": 0.03701,
     "end_time": "2024-05-21T10:05:38.500809",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.463799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Consider the two input examples, which which have already been mapped to token IDs\n",
    "inputs = torch.tensor([[16833, 3626, 6100],   # [\"every effort moves\",\n",
    "                       [40,    1107, 588]])   #  \"I really like\"]\n",
    "\n",
    "# Matching these inputs, the `targets` contain the token IDs we aim for the model to produce:\n",
    "targets = torch.tensor([[3626, 6100, 345  ],  # [\" effort moves you\",\n",
    "                        [1107,   588, 11311]]) #  \" really like chocolate\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "86422fb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.558642Z",
     "iopub.status.busy": "2024-05-21T10:05:38.558332Z",
     "iopub.status.idle": "2024-05-21T10:05:38.640805Z",
     "shell.execute_reply": "2024-05-21T10:05:38.639763Z"
    },
    "papermill": {
     "duration": 0.113694,
     "end_time": "2024-05-21T10:05:38.642992",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.529298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2, 3, 50257])\n"
     ]
    }
   ],
   "source": [
    "with torch.no_grad():\n",
    "    logits = model(inputs)\n",
    "probas = torch.softmax(logits, dim=-1) # Probability of each token in vocabulary\n",
    "print(probas.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7c152498",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.703009Z",
     "iopub.status.busy": "2024-05-21T10:05:38.702359Z",
     "iopub.status.idle": "2024-05-21T10:05:38.708858Z",
     "shell.execute_reply": "2024-05-21T10:05:38.707737Z"
    },
    "papermill": {
     "duration": 0.038754,
     "end_time": "2024-05-21T10:05:38.710894",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.672140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Token IDs:\n",
      " tensor([[[50153],\n",
      "         [36902],\n",
      "         [42826]],\n",
      "\n",
      "        [[ 9580],\n",
      "         [39797],\n",
      "         [ 6972]]])\n"
     ]
    }
   ],
   "source": [
    "token_ids = torch.argmax(probas, dim=-1, keepdim=True)\n",
    "print(\"Token IDs:\\n\", token_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "50dc5f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.771993Z",
     "iopub.status.busy": "2024-05-21T10:05:38.771115Z",
     "iopub.status.idle": "2024-05-21T10:05:38.776194Z",
     "shell.execute_reply": "2024-05-21T10:05:38.775361Z"
    },
    "papermill": {
     "duration": 0.038063,
     "end_time": "2024-05-21T10:05:38.778706",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.740643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Targets batch 1:  effort moves you\n",
      "Outputs batch 1:  PRESIDENTanonNetflix\n"
     ]
    }
   ],
   "source": [
    "print(f\"Targets batch 1: {token_ids_to_text(targets[0], tokenizer)}\")\n",
    "print(f\"Outputs batch 1: {token_ids_to_text(token_ids[0].flatten(), tokenizer)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a1c989e",
   "metadata": {
    "papermill": {
     "duration": 0.028612,
     "end_time": "2024-05-21T10:05:38.836761",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.808149",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "When we decode these tokens, we find that these output tokens are quite different from the target tokens we want the model to generate:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3638f9d",
   "metadata": {
    "papermill": {
     "duration": 0.031591,
     "end_time": "2024-05-21T10:05:38.897222",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.865631",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# implement the text evaluation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3aaf98f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:38.957368Z",
     "iopub.status.busy": "2024-05-21T10:05:38.956620Z",
     "iopub.status.idle": "2024-05-21T10:05:38.971304Z",
     "shell.execute_reply": "2024-05-21T10:05:38.970210Z"
    },
    "papermill": {
     "duration": 0.046317,
     "end_time": "2024-05-21T10:05:38.973344",
     "exception": false,
     "start_time": "2024-05-21T10:05:38.927027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text 1: tensor([7.0455e-05, 3.4465e-05, 9.4933e-06])\n",
      "Text 2: tensor([7.5311e-06, 5.2012e-05, 5.1790e-06])\n"
     ]
    }
   ],
   "source": [
    "text_idx = 0\n",
    "target_probas_1 = probas[text_idx, [0, 1, 2], targets[text_idx]]\n",
    "print(\"Text 1:\", target_probas_1)\n",
    " \n",
    "text_idx = 1\n",
    "target_probas_2 = probas[text_idx, [0, 1, 2], targets[text_idx]]\n",
    "print(\"Text 2:\", target_probas_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "075faa41",
   "metadata": {
    "papermill": {
     "duration": 0.029606,
     "end_time": "2024-05-21T10:05:39.033679",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.004073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Backpropagation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6b66edb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.104223Z",
     "iopub.status.busy": "2024-05-21T10:05:39.103751Z",
     "iopub.status.idle": "2024-05-21T10:05:39.112083Z",
     "shell.execute_reply": "2024-05-21T10:05:39.111005Z"
    },
    "papermill": {
     "duration": 0.049012,
     "end_time": "2024-05-21T10:05:39.114468",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.065456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([ -9.5605, -10.2756, -11.5649, -11.7965,  -9.8640, -12.1709])\n"
     ]
    }
   ],
   "source": [
    "log_probas = torch.log(torch.cat((target_probas_1, target_probas_2)))\n",
    "print(log_probas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7f36ef8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.182201Z",
     "iopub.status.busy": "2024-05-21T10:05:39.181455Z",
     "iopub.status.idle": "2024-05-21T10:05:39.188134Z",
     "shell.execute_reply": "2024-05-21T10:05:39.187199Z"
    },
    "papermill": {
     "duration": 0.039595,
     "end_time": "2024-05-21T10:05:39.190010",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.150415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(-10.8721)\n"
     ]
    }
   ],
   "source": [
    "avg_log_probas = torch.mean(log_probas)\n",
    "print(avg_log_probas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f1ce5917",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.249703Z",
     "iopub.status.busy": "2024-05-21T10:05:39.249329Z",
     "iopub.status.idle": "2024-05-21T10:05:39.255215Z",
     "shell.execute_reply": "2024-05-21T10:05:39.254346Z"
    },
    "papermill": {
     "duration": 0.03788,
     "end_time": "2024-05-21T10:05:39.257179",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.219299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(10.8721)\n"
     ]
    }
   ],
   "source": [
    "neg_avg_log_probas = avg_log_probas * -1\n",
    "print(neg_avg_log_probas)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0fee2a",
   "metadata": {
    "papermill": {
     "duration": 0.02897,
     "end_time": "2024-05-21T10:05:39.314798",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.285828",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Cross entropy loss\n",
    "\n",
    "At its core, the cross entropy loss is a popular measure in machine learning and deep learning that measures the difference between two probability distributions--typically, the true distribution of labels (here, tokens in a dataset) and the predicted distribution from a model (for instance, the token probabilities generated by an LLM)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ecdb5a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.374782Z",
     "iopub.status.busy": "2024-05-21T10:05:39.374422Z",
     "iopub.status.idle": "2024-05-21T10:05:39.379276Z",
     "shell.execute_reply": "2024-05-21T10:05:39.378395Z"
    },
    "papermill": {
     "duration": 0.037727,
     "end_time": "2024-05-21T10:05:39.381781",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.344054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logits shape: torch.Size([2, 3, 50257])\n",
      "Targets shape: torch.Size([2, 3])\n"
     ]
    }
   ],
   "source": [
    "print(\"Logits shape:\", logits.shape)\n",
    "print(\"Targets shape:\", targets.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8f38238e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.441950Z",
     "iopub.status.busy": "2024-05-21T10:05:39.441596Z",
     "iopub.status.idle": "2024-05-21T10:05:39.447491Z",
     "shell.execute_reply": "2024-05-21T10:05:39.446461Z"
    },
    "papermill": {
     "duration": 0.038078,
     "end_time": "2024-05-21T10:05:39.449439",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.411361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flattened logits: torch.Size([6, 50257])\n",
      "Flattened targets: torch.Size([6])\n"
     ]
    }
   ],
   "source": [
    "logits_flat = logits.flatten(0, 1)\n",
    "targets_flat = targets.flatten()\n",
    "print(\"Flattened logits:\", logits_flat.shape)\n",
    "print(\"Flattened targets:\", targets_flat.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "92de616a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.510141Z",
     "iopub.status.busy": "2024-05-21T10:05:39.509523Z",
     "iopub.status.idle": "2024-05-21T10:05:39.521406Z",
     "shell.execute_reply": "2024-05-21T10:05:39.520354Z"
    },
    "papermill": {
     "duration": 0.04452,
     "end_time": "2024-05-21T10:05:39.523437",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.478917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(10.8721)\n"
     ]
    }
   ],
   "source": [
    "loss = torch.nn.functional.cross_entropy(logits_flat, targets_flat)\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d4a5d51",
   "metadata": {
    "papermill": {
     "duration": 0.029634,
     "end_time": "2024-05-21T10:05:39.583003",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.553369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Perplexity\n",
    "Perplexity is a measure often used alongside cross entropy loss to evaluate the performance of models in tasks like language modeling. It can provide a more interpretable way to understand the uncertainty of a model in predicting the next token in a sequence.\n",
    "\n",
    "Perplexity can be calculated as perplexity = torch.exp(loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "875049a5",
   "metadata": {
    "papermill": {
     "duration": 0.028927,
     "end_time": "2024-05-21T10:05:39.641154",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.612227",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculating the training and validation set losses"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2705911",
   "metadata": {
    "papermill": {
     "duration": 0.030102,
     "end_time": "2024-05-21T10:05:39.700898",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.670796",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The following code loads the \"The Verdict\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "32b34493",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.764407Z",
     "iopub.status.busy": "2024-05-21T10:05:39.763408Z",
     "iopub.status.idle": "2024-05-21T10:05:39.774099Z",
     "shell.execute_reply": "2024-05-21T10:05:39.773145Z"
    },
    "papermill": {
     "duration": 0.044008,
     "end_time": "2024-05-21T10:05:39.776198",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.732190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "file_path = \"/kaggle/input/the-verdict/the-verdict.txt\"\n",
    "with open(file_path, \"r\", encoding=\"utf-8\") as file:\n",
    "    text_data = file.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0c114e48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.837141Z",
     "iopub.status.busy": "2024-05-21T10:05:39.836222Z",
     "iopub.status.idle": "2024-05-21T10:05:39.846303Z",
     "shell.execute_reply": "2024-05-21T10:05:39.845385Z"
    },
    "papermill": {
     "duration": 0.042381,
     "end_time": "2024-05-21T10:05:39.848114",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.805733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Characters: 20479\n",
      "Tokens: 5145\n"
     ]
    }
   ],
   "source": [
    "total_characters = len(text_data)\n",
    "total_tokens = len(tokenizer.encode(text_data))\n",
    "print(\"Characters:\", total_characters)\n",
    "print(\"Tokens:\", total_tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ead83523",
   "metadata": {
    "papermill": {
     "duration": 0.028972,
     "end_time": "2024-05-21T10:05:39.906034",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.877062",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# To implement the data splitting\n",
    "\n",
    "we first define a train_ratio to use 90% of the data for training and the remaining 10% as validation data for model evaluation during training:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0bacc858",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:39.966472Z",
     "iopub.status.busy": "2024-05-21T10:05:39.965734Z",
     "iopub.status.idle": "2024-05-21T10:05:39.970454Z",
     "shell.execute_reply": "2024-05-21T10:05:39.969563Z"
    },
    "papermill": {
     "duration": 0.037163,
     "end_time": "2024-05-21T10:05:39.972370",
     "exception": false,
     "start_time": "2024-05-21T10:05:39.935207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_ratio = 0.90\n",
    "split_idx = int(train_ratio * len(text_data))\n",
    "train_data = text_data[:split_idx]\n",
    "val_data = text_data[split_idx:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba3d49cc",
   "metadata": {
    "papermill": {
     "duration": 0.029199,
     "end_time": "2024-05-21T10:05:40.032509",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.003310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using the train_data and val_data subsets, we can now create the respective data loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f8f442fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.093407Z",
     "iopub.status.busy": "2024-05-21T10:05:40.092670Z",
     "iopub.status.idle": "2024-05-21T10:05:40.101954Z",
     "shell.execute_reply": "2024-05-21T10:05:40.101054Z"
    },
    "papermill": {
     "duration": 0.04213,
     "end_time": "2024-05-21T10:05:40.103790",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.061660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    " \n",
    "class GPTDatasetV1(Dataset):\n",
    "    def __init__(self, txt, tokenizer, max_length, stride):\n",
    "        self.tokenizer = tokenizer\n",
    "        self.input_ids = []\n",
    "        self.target_ids = []\n",
    " \n",
    "        token_ids = tokenizer.encode(txt, allowed_special={\"<|endoftext|>\"})\n",
    " \n",
    "        for i in range(0, len(token_ids) - max_length, stride):\n",
    "            input_chunk = token_ids[i:i + max_length]\n",
    "            target_chunk = token_ids[i + 1: i + max_length + 1]\n",
    "            self.input_ids.append(torch.tensor(input_chunk))\n",
    "            self.target_ids.append(torch.tensor(target_chunk))\n",
    " \n",
    "    def __len__(self):\n",
    "        return len(self.input_ids)\n",
    " \n",
    "    def __getitem__(self, idx):\n",
    "        return self.input_ids[idx], self.target_ids[idx]\n",
    "    \n",
    "\n",
    "def create_dataloader_v1(txt, batch_size=4, max_length=256, stride=128, shuffle=True, drop_last=True):\n",
    "    tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
    "    dataset = GPTDatasetV1(txt, tokenizer, max_length, stride)\n",
    "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle, drop_last=drop_last)\n",
    "    return dataloader  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "93cf4420",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.163693Z",
     "iopub.status.busy": "2024-05-21T10:05:40.163359Z",
     "iopub.status.idle": "2024-05-21T10:05:40.178097Z",
     "shell.execute_reply": "2024-05-21T10:05:40.177221Z"
    },
    "papermill": {
     "duration": 0.047021,
     "end_time": "2024-05-21T10:05:40.180148",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.133127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "torch.manual_seed(123)\n",
    " \n",
    "train_loader = create_dataloader_v1(\n",
    "    train_data,\n",
    "    batch_size=2,\n",
    "    max_length=GPT_CONFIG_124M[\"ctx_len\"],\n",
    "    stride=GPT_CONFIG_124M[\"ctx_len\"],\n",
    "    drop_last=True,\n",
    "    shuffle=True\n",
    ")\n",
    "val_loader = create_dataloader_v1(\n",
    "    val_data,\n",
    "    batch_size=2,\n",
    "    max_length=GPT_CONFIG_124M[\"ctx_len\"],\n",
    "    stride=GPT_CONFIG_124M[\"ctx_len\"],\n",
    "    drop_last=False,\n",
    "    shuffle=False\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "16af3133",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.239959Z",
     "iopub.status.busy": "2024-05-21T10:05:40.239288Z",
     "iopub.status.idle": "2024-05-21T10:05:40.247566Z",
     "shell.execute_reply": "2024-05-21T10:05:40.246565Z"
    },
    "papermill": {
     "duration": 0.040341,
     "end_time": "2024-05-21T10:05:40.249562",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.209221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train loader:\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n",
      "\n",
      "Validation loader:\n",
      "torch.Size([2, 256]) torch.Size([2, 256])\n"
     ]
    }
   ],
   "source": [
    "print(\"Train loader:\")\n",
    "for x, y in train_loader:\n",
    "    print(x.shape, y.shape)\n",
    " \n",
    "print(\"\\nValidation loader:\")\n",
    "for x, y in val_loader:\n",
    "    print(x.shape, y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8baaeb61",
   "metadata": {
    "papermill": {
     "duration": 0.029466,
     "end_time": "2024-05-21T10:05:40.309282",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.279816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "we implement a utility function to calculate the cross entropy loss of a given batch returned via the training and validation loaderwe implement a utility function to calculate the cross entropy loss of a given batch returned via the training and validation loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "73b27063",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.371198Z",
     "iopub.status.busy": "2024-05-21T10:05:40.370348Z",
     "iopub.status.idle": "2024-05-21T10:05:40.375875Z",
     "shell.execute_reply": "2024-05-21T10:05:40.374970Z"
    },
    "papermill": {
     "duration": 0.038338,
     "end_time": "2024-05-21T10:05:40.377705",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.339367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_loss_batch(input_batch, target_batch, model, device):\n",
    "    input_batch, target_batch = input_batch.to(device), target_batch.to(device)\n",
    "    logits = model(input_batch)\n",
    "    loss = torch.nn.functional.cross_entropy(\n",
    "        logits.flatten(0, 1), target_batch.flatten()\n",
    "    )\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "abaea0cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.439143Z",
     "iopub.status.busy": "2024-05-21T10:05:40.438426Z",
     "iopub.status.idle": "2024-05-21T10:05:40.444746Z",
     "shell.execute_reply": "2024-05-21T10:05:40.443862Z"
    },
    "papermill": {
     "duration": 0.038581,
     "end_time": "2024-05-21T10:05:40.446614",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.408033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_loss_loader(data_loader, model, device, num_batches=None):\n",
    "    total_loss = 0.\n",
    "    if num_batches is None:\n",
    "        num_batches = len(data_loader)\n",
    "    else:\n",
    "        num_batches = min(num_batches, len(data_loader))\n",
    "    for i, (input_batch, target_batch) in enumerate(data_loader):\n",
    "        if i < num_batches:\n",
    "            loss = calc_loss_batch(input_batch, target_batch, model, device)\n",
    "            total_loss += loss.item()\n",
    "        else:\n",
    "            break\n",
    "    return total_loss / num_batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a0def126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:40.506269Z",
     "iopub.status.busy": "2024-05-21T10:05:40.505932Z",
     "iopub.status.idle": "2024-05-21T10:05:41.778583Z",
     "shell.execute_reply": "2024-05-21T10:05:41.777482Z"
    },
    "papermill": {
     "duration": 1.304803,
     "end_time": "2024-05-21T10:05:41.780651",
     "exception": false,
     "start_time": "2024-05-21T10:05:40.475848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training loss: 10.998696539137098\n",
      "Validation loss: 10.980057716369629\n"
     ]
    }
   ],
   "source": [
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model.to(device)\n",
    "train_loss = calc_loss_loader(train_loader, model, device)\n",
    "val_loss = calc_loss_loader(val_loader, model, device)\n",
    "print(\"Training loss:\", train_loss)\n",
    "print(\"Validation loss:\", val_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606fe929",
   "metadata": {
    "papermill": {
     "duration": 0.029003,
     "end_time": "2024-05-21T10:05:41.839299",
     "exception": false,
     "start_time": "2024-05-21T10:05:41.810296",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training an LLM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e24ff4b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:41.900841Z",
     "iopub.status.busy": "2024-05-21T10:05:41.900090Z",
     "iopub.status.idle": "2024-05-21T10:05:41.908569Z",
     "shell.execute_reply": "2024-05-21T10:05:41.907593Z"
    },
    "papermill": {
     "duration": 0.041746,
     "end_time": "2024-05-21T10:05:41.910768",
     "exception": false,
     "start_time": "2024-05-21T10:05:41.869022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model_simple(model, train_loader, val_loader, optimizer, device, num_epochs,\n",
    "                       eval_freq, eval_iter, start_context):\n",
    "    train_losses, val_losses, track_tokens_seen = [], [], []\n",
    "    tokens_seen, global_step = 0, -1\n",
    " \n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        for input_batch, target_batch in train_loader:\n",
    "            optimizer.zero_grad()\n",
    "            loss = calc_loss_batch(input_batch, target_batch, model, device)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            tokens_seen += input_batch.numel()\n",
    "            global_step += 1\n",
    " \n",
    "            if global_step % eval_freq == 0:\n",
    "                train_loss, val_loss = evaluate_model(\n",
    "                    model, train_loader, val_loader, device, eval_iter)\n",
    "                train_losses.append(train_loss)\n",
    "                val_losses.append(val_loss)\n",
    "                track_tokens_seen.append(tokens_seen)\n",
    "                print(f\"Ep {epoch+1} (Step {global_step:06d}): \"\n",
    "                      f\"Train loss {train_loss:.3f}, Val loss {val_loss:.3f}\")\n",
    " \n",
    "        generate_and_print_sample(\n",
    "            model, train_loader.dataset.tokenizer, device, start_context\n",
    "        )\n",
    "    return train_losses, val_losses, track_tokens_seen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8b3910be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:41.972403Z",
     "iopub.status.busy": "2024-05-21T10:05:41.971602Z",
     "iopub.status.idle": "2024-05-21T10:05:41.977419Z",
     "shell.execute_reply": "2024-05-21T10:05:41.976464Z"
    },
    "papermill": {
     "duration": 0.03881,
     "end_time": "2024-05-21T10:05:41.979362",
     "exception": false,
     "start_time": "2024-05-21T10:05:41.940552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def evaluate_model(model, train_loader, val_loader, device, eval_iter):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        train_loss = calc_loss_loader(train_loader, model, device, num_batches=eval_iter)\n",
    "        val_loss = calc_loss_loader(val_loader, model, device, num_batches=eval_iter)\n",
    "    model.train()\n",
    "    return train_loss, val_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "78a5b6bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:42.042280Z",
     "iopub.status.busy": "2024-05-21T10:05:42.041893Z",
     "iopub.status.idle": "2024-05-21T10:05:42.048124Z",
     "shell.execute_reply": "2024-05-21T10:05:42.047287Z"
    },
    "papermill": {
     "duration": 0.039376,
     "end_time": "2024-05-21T10:05:42.050085",
     "exception": false,
     "start_time": "2024-05-21T10:05:42.010709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_and_print_sample(model, tokenizer, device, start_context):\n",
    "    model.eval()\n",
    "    context_size = model.pos_emb.weight.shape[0]\n",
    "    encoded = text_to_token_ids(start_context, tokenizer).to(device)\n",
    "    with torch.no_grad():\n",
    "        token_ids = generate_text_simple(\n",
    "            model=model, idx=encoded,\n",
    "            max_new_tokens=50, context_size=context_size\n",
    "        )\n",
    "        decoded_text = token_ids_to_text(token_ids, tokenizer)\n",
    "        print(decoded_text.replace(\"\\n\", \" \"))  # Compact print format\n",
    "    model.train()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fab17d5",
   "metadata": {
    "papermill": {
     "duration": 0.02953,
     "end_time": "2024-05-21T10:05:42.108637",
     "exception": false,
     "start_time": "2024-05-21T10:05:42.079107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# AdamW\n",
    "Adam optimizers are a popular choice for training deep neural networks. However, in our training loop, we opt for the AdamW optimizer. AdamW is a variant of Adam that improves the weight decay approach, which aims to minimize model complexity and prevent overfitting by penalizing larger weights. This adjustment allows AdamW to achieve more effective regularization and better generalization and is thus frequently used in the training of LLMs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fffcc23f",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-05-21T10:05:42.169637Z",
     "iopub.status.busy": "2024-05-21T10:05:42.169187Z",
     "iopub.status.idle": "2024-05-21T10:07:12.008233Z",
     "shell.execute_reply": "2024-05-21T10:07:12.007139Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 89.872178,
     "end_time": "2024-05-21T10:07:12.010304",
     "exception": false,
     "start_time": "2024-05-21T10:05:42.138126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ep 1 (Step 000000): Train loss 10.074, Val loss 9.942\n",
      "Ep 1 (Step 000005): Train loss 8.163, Val loss 8.342\n",
      "Every effort moves you,,,,,,,,,,,,.                                     \n",
      "Ep 2 (Step 000010): Train loss 6.559, Val loss 7.052\n",
      "Ep 2 (Step 000015): Train loss 5.935, Val loss 6.606\n",
      "Every effort moves you, the,, and,,,,,,,,,.                                   \n",
      "Ep 3 (Step 000020): Train loss 5.877, Val loss 6.489\n",
      "Ep 3 (Step 000025): Train loss 5.479, Val loss 6.480\n",
      "Every effort moves you, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and, and\n",
      "Ep 4 (Step 000030): Train loss 5.065, Val loss 6.504\n",
      "Ep 4 (Step 000035): Train loss 5.426, Val loss 6.488\n",
      "Every effort moves you, and he had the a, and the a, and the of the a, and he had the of the of the of the of the a of the of the of the of the of the of the of the of the of the of the\n",
      "Ep 5 (Step 000040): Train loss 5.187, Val loss 6.553\n",
      "Every effort moves you the a to the a \" it--I to the \" it--I it-- it-- \" it--I                           \n",
      "Ep 6 (Step 000045): Train loss 5.161, Val loss 6.421\n",
      "Ep 6 (Step 000050): Train loss 3.919, Val loss 6.350\n",
      "Every effort moves you, and, and in the picture--as, and, and, and I had been, I had been the, and, and, and I had been the picture, as, and, as, and, and \", and I had been\n",
      "Ep 7 (Step 000055): Train loss 4.646, Val loss 6.267\n",
      "Ep 7 (Step 000060): Train loss 3.295, Val loss 6.167\n",
      "Every effort moves you know to have to see that he had been--I had been.                      \"I me. I was a little the donkey, and I was\n",
      "Ep 8 (Step 000065): Train loss 3.277, Val loss 6.158\n",
      "Ep 8 (Step 000070): Train loss 2.452, Val loss 6.222\n",
      "Every effort moves you in the fact of that I felt of the fact that he had the last word.           \"Oh, and I had a little the donkey--and it the donkey, and the room, I had\n",
      "Ep 9 (Step 000075): Train loss 2.592, Val loss 6.144\n",
      "Ep 9 (Step 000080): Train loss 2.207, Val loss 6.233\n",
      "Every effort moves you know,\" was not that my dear--I felt nervous and I felt in a and in the picture to me to me.           \"Oh, I had the donkey, and it.   \n",
      "Ep 10 (Step 000085): Train loss 1.454, Val loss 6.223\n",
      "Every effort moves you know; and my surprise, one of the deep arm-chairs forward. \"There: make yourself comfortable--and here are the cigars you like.\"                    \n",
      "Ep 11 (Step 000090): Train loss 1.556, Val loss 6.239\n",
      "Ep 11 (Step 000095): Train loss 1.006, Val loss 6.265\n",
      "Every effort moves you know,\" was one of the picture for nothing--I told Mrs.                                    \n",
      "Ep 12 (Step 000100): Train loss 0.821, Val loss 6.336\n",
      "Ep 12 (Step 000105): Train loss 0.522, Val loss 6.411\n",
      "Every effort moves you?\"     I glanced after him, and uncertain.  \"Once, when I looked up, I felt to see a smile behind his close grayish beard--as if he had the donkey. \"There were days when I\n",
      "Ep 13 (Step 000110): Train loss 0.390, Val loss 6.442\n",
      "Ep 13 (Step 000115): Train loss 0.412, Val loss 6.573\n",
      "Every effort moves you know,\" was one of the axioms he laid down across the Sevres and silver of an exquisitely appointed luncheon-table, when, on a later day, I had again run over from Monte Carlo; and Mrs. Gis\n",
      "Ep 14 (Step 000120): Train loss 0.306, Val loss 6.629\n",
      "Ep 14 (Step 000125): Train loss 0.230, Val loss 6.614\n",
      "Every effort moves you know,\" was one of the axioms he laid down across the Sevres and silver of an exquisitely appointed luncheon-table, when, on a later day, I had again run over from Monte Carlo; and Mrs. Gis\n",
      "Ep 15 (Step 000130): Train loss 0.199, Val loss 6.696\n",
      "Every effort moves you know,\" was one of the axioms he laid down across the Sevres and silver of an exquisitely appointed luncheon-table, when, on a later day, I had again run over from Monte Carlo; and Mrs. Gis\n",
      "Ep 16 (Step 000135): Train loss 0.190, Val loss 6.766\n",
      "Ep 16 (Step 000140): Train loss 0.136, Val loss 6.862\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 17 (Step 000145): Train loss 0.171, Val loss 6.914\n",
      "Ep 17 (Step 000150): Train loss 0.132, Val loss 6.878\n",
      "Every effort moves you?\" \"I turned back his pictures? I laid down across the Sevres and silver of an exquisitely appointed luncheon-table, when, instinctively embarrassed by my unexpected discovery; and as I turned, my eye fell on a small picture\n",
      "Ep 18 (Step 000155): Train loss 0.114, Val loss 6.985\n",
      "Ep 18 (Step 000160): Train loss 0.109, Val loss 7.044\n",
      "Every effort moves you?\" \"Oh, pushed one of the deep arm-chairs forward. \"There: make yourself comfortable--and here are the cigars you like.\" \"I looked at the donkey again. I saw that, when Stroud laid in the first\n",
      "Ep 19 (Step 000165): Train loss 0.090, Val loss 7.034\n",
      "Ep 19 (Step 000170): Train loss 0.076, Val loss 7.019\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back the window-curtains, moved aside a _jardiniere_ full of\n",
      "Ep 20 (Step 000175): Train loss 0.064, Val loss 7.069\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 21 (Step 000180): Train loss 0.039, Val loss 7.103\n",
      "Ep 21 (Step 000185): Train loss 0.040, Val loss 7.089\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 22 (Step 000190): Train loss 0.047, Val loss 7.106\n",
      "Ep 22 (Step 000195): Train loss 0.030, Val loss 7.204\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 23 (Step 000200): Train loss 0.030, Val loss 7.185\n",
      "Ep 23 (Step 000205): Train loss 0.041, Val loss 7.211\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 24 (Step 000210): Train loss 0.047, Val loss 7.224\n",
      "Ep 24 (Step 000215): Train loss 0.036, Val loss 7.177\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 25 (Step 000220): Train loss 0.018, Val loss 7.241\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 26 (Step 000225): Train loss 0.022, Val loss 7.307\n",
      "Ep 26 (Step 000230): Train loss 0.017, Val loss 7.318\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 27 (Step 000235): Train loss 0.016, Val loss 7.347\n",
      "Ep 27 (Step 000240): Train loss 0.014, Val loss 7.398\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 28 (Step 000245): Train loss 0.011, Val loss 7.369\n",
      "Ep 28 (Step 000250): Train loss 0.011, Val loss 7.395\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 29 (Step 000255): Train loss 0.013, Val loss 7.482\n",
      "Ep 29 (Step 000260): Train loss 0.029, Val loss 7.422\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 30 (Step 000265): Train loss 0.008, Val loss 7.380\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 31 (Step 000270): Train loss 0.018, Val loss 7.425\n",
      "Ep 31 (Step 000275): Train loss 0.009, Val loss 7.488\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 32 (Step 000280): Train loss 0.009, Val loss 7.484\n",
      "Ep 32 (Step 000285): Train loss 0.006, Val loss 7.493\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 33 (Step 000290): Train loss 0.006, Val loss 7.487\n",
      "Ep 33 (Step 000295): Train loss 0.005, Val loss 7.488\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 34 (Step 000300): Train loss 0.006, Val loss 7.525\n",
      "Ep 34 (Step 000305): Train loss 0.005, Val loss 7.534\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 35 (Step 000310): Train loss 0.004, Val loss 7.536\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 36 (Step 000315): Train loss 0.006, Val loss 7.558\n",
      "Ep 36 (Step 000320): Train loss 0.004, Val loss 7.538\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 37 (Step 000325): Train loss 0.005, Val loss 7.569\n",
      "Ep 37 (Step 000330): Train loss 0.009, Val loss 7.555\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 38 (Step 000335): Train loss 0.003, Val loss 7.571\n",
      "Ep 38 (Step 000340): Train loss 0.004, Val loss 7.580\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 39 (Step 000345): Train loss 0.003, Val loss 7.574\n",
      "Ep 39 (Step 000350): Train loss 0.003, Val loss 7.589\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 40 (Step 000355): Train loss 0.003, Val loss 7.601\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 41 (Step 000360): Train loss 0.003, Val loss 7.615\n",
      "Ep 41 (Step 000365): Train loss 0.003, Val loss 7.633\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 42 (Step 000370): Train loss 0.003, Val loss 7.652\n",
      "Ep 42 (Step 000375): Train loss 0.003, Val loss 7.662\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 43 (Step 000380): Train loss 0.003, Val loss 7.671\n",
      "Ep 43 (Step 000385): Train loss 0.003, Val loss 7.678\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 44 (Step 000390): Train loss 0.002, Val loss 7.682\n",
      "Ep 44 (Step 000395): Train loss 0.002, Val loss 7.693\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 45 (Step 000400): Train loss 0.002, Val loss 7.706\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 46 (Step 000405): Train loss 0.002, Val loss 7.714\n",
      "Ep 46 (Step 000410): Train loss 0.002, Val loss 7.697\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 47 (Step 000415): Train loss 0.002, Val loss 7.696\n",
      "Ep 47 (Step 000420): Train loss 0.002, Val loss 7.715\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 48 (Step 000425): Train loss 0.002, Val loss 7.734\n",
      "Ep 48 (Step 000430): Train loss 0.002, Val loss 7.739\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 49 (Step 000435): Train loss 0.002, Val loss 7.731\n",
      "Ep 49 (Step 000440): Train loss 0.002, Val loss 7.723\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n",
      "Ep 50 (Step 000445): Train loss 0.002, Val loss 7.726\n",
      "Every effort moves you?\"  \"Yes--quite insensible to the irony. She wanted him vindicated--and by me!\"  He laughed again, and threw back his head to look up at the sketch of the donkey. \"There were days when I\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "model = GPTModel(GPT_CONFIG_124M)\n",
    "model.to(device)\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=0.0004, weight_decay=0.1)\n",
    "num_epochs = 50\n",
    "train_losses, val_losses, tokens_seen = train_model_simple(\n",
    "    model, train_loader, val_loader, optimizer, device,\n",
    "    num_epochs=num_epochs, eval_freq=5, eval_iter=1,\n",
    "    start_context=\"Every effort moves you\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c2cc4b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:12.092350Z",
     "iopub.status.busy": "2024-05-21T10:07:12.091854Z",
     "iopub.status.idle": "2024-05-21T10:07:12.863135Z",
     "shell.execute_reply": "2024-05-21T10:07:12.861834Z"
    },
    "papermill": {
     "duration": 0.816642,
     "end_time": "2024-05-21T10:07:12.867457",
     "exception": false,
     "start_time": "2024-05-21T10:07:12.050815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def plot_losses(epochs_seen, tokens_seen, train_losses, val_losses):\n",
    "    fig, ax1 = plt.subplots(figsize=(5, 3))\n",
    "    ax1.plot(epochs_seen, train_losses, label=\"Training loss\")\n",
    "    ax1.plot(epochs_seen, val_losses, linestyle=\"-.\", label=\"Validation loss\")\n",
    "    ax1.set_xlabel(\"Epochs\")\n",
    "    ax1.set_ylabel(\"Loss\")\n",
    "    ax1.legend(loc=\"upper right\")\n",
    "    ax2 = ax1.twiny()\n",
    "    ax2.plot(tokens_seen, train_losses, alpha=0)\n",
    "    ax2.set_xlabel(\"Tokens seen\")\n",
    "    fig.tight_layout()\n",
    "    plt.show()\n",
    " \n",
    "epochs_tensor = torch.linspace(0, num_epochs, len(train_losses))\n",
    "plot_losses(epochs_tensor, tokens_seen, train_losses, val_losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1173a97c",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:12.974569Z",
     "iopub.status.busy": "2024-05-21T10:07:12.973708Z",
     "iopub.status.idle": "2024-05-21T10:07:14.052461Z",
     "shell.execute_reply": "2024-05-21T10:07:14.051515Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 1.122498,
     "end_time": "2024-05-21T10:07:14.054889",
     "exception": false,
     "start_time": "2024-05-21T10:07:12.932391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPTModel(\n",
       "  (tok_emb): Embedding(50257, 768)\n",
       "  (pos_emb): Embedding(256, 768)\n",
       "  (drop_emb): Dropout(p=0.1, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (1): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (2): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (3): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (4): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (5): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (6): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (7): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (8): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (9): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (10): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (11): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "  )\n",
       "  (final_norm): LayerNorm()\n",
       "  (out_head): Linear(in_features=768, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.to(\"cpu\")\n",
    "model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b097a15c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:14.136119Z",
     "iopub.status.busy": "2024-05-21T10:07:14.135808Z",
     "iopub.status.idle": "2024-05-21T10:07:20.036093Z",
     "shell.execute_reply": "2024-05-21T10:07:20.034754Z"
    },
    "papermill": {
     "duration": 5.942956,
     "end_time": "2024-05-21T10:07:20.038166",
     "exception": false,
     "start_time": "2024-05-21T10:07:14.095210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output text:\n",
      " Who is Mrs. Gideon Thwing, and what is her reaction to Jack Gisburn's \"abdication\"?\n",
      "A slight shade of constraint crossed Mrs. Gisburn's open countenance. \"It's his ridiculous modesty, you know. He says they're not fit to have about; he's sent them all away except one--my portrait--and\n"
     ]
    }
   ],
   "source": [
    "tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
    "token_ids = generate_text_simple(\n",
    "    model=model,\n",
    "    idx=text_to_token_ids(f'Who is Mrs. Gideon Thwing, and what is her reaction to Jack Gisburn\\'s \"abdication\"?', tokenizer),\n",
    "    max_new_tokens=50,\n",
    "    context_size=GPT_CONFIG_124M[\"ctx_len\"]\n",
    ")\n",
    "print(\"Output text:\\n\", token_ids_to_text(token_ids, tokenizer))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a77ddd12",
   "metadata": {
    "papermill": {
     "duration": 0.040086,
     "end_time": "2024-05-21T10:07:20.119819",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.079733",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Temperature scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9e3d8aa4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.202512Z",
     "iopub.status.busy": "2024-05-21T10:07:20.202128Z",
     "iopub.status.idle": "2024-05-21T10:07:20.207497Z",
     "shell.execute_reply": "2024-05-21T10:07:20.206635Z"
    },
    "papermill": {
     "duration": 0.049505,
     "end_time": "2024-05-21T10:07:20.209501",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.159996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vocab = { \n",
    "    \"closer\": 0,\n",
    "    \"every\": 1, \n",
    "    \"effort\": 2, \n",
    "    \"forward\": 3,\n",
    "    \"inches\": 4,\n",
    "    \"moves\": 5, \n",
    "    \"pizza\": 6,\n",
    "    \"toward\": 7,\n",
    "    \"you\": 8,\n",
    "} \n",
    "inverse_vocab = {v: k for k, v in vocab.items()}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4be16eb",
   "metadata": {
    "papermill": {
     "duration": 0.039766,
     "end_time": "2024-05-21T10:07:20.289470",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.249704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "assume the LLM is given the start context \"every effort moves you\" and generates the following next-token logits:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b930de32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.371573Z",
     "iopub.status.busy": "2024-05-21T10:07:20.370809Z",
     "iopub.status.idle": "2024-05-21T10:07:20.376452Z",
     "shell.execute_reply": "2024-05-21T10:07:20.375508Z"
    },
    "papermill": {
     "duration": 0.049324,
     "end_time": "2024-05-21T10:07:20.378459",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.329135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "next_token_logits = torch.tensor(\n",
    "    [4.51, 0.89, -1.90, 6.75, 1.63, -1.62, -1.89, 6.28, 1.79]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13179502",
   "metadata": {
    "papermill": {
     "duration": 0.039867,
     "end_time": "2024-05-21T10:07:20.458697",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.418830",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As discussed in the previous chapter, Inside the generate_text_simple, we convert the logits into probabilities via the softmax function and obtain the token ID corresponding the generated token via the argmax function, which we can then map back into text via the inverse vocabulary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d26366bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.540393Z",
     "iopub.status.busy": "2024-05-21T10:07:20.539497Z",
     "iopub.status.idle": "2024-05-21T10:07:20.545735Z",
     "shell.execute_reply": "2024-05-21T10:07:20.544616Z"
    },
    "papermill": {
     "duration": 0.04935,
     "end_time": "2024-05-21T10:07:20.547750",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.498400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "forward\n"
     ]
    }
   ],
   "source": [
    "probas = torch.softmax(next_token_logits, dim=0)\n",
    "next_token_id = torch.argmax(probas).item()\n",
    "print(inverse_vocab[next_token_id])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "996375d2",
   "metadata": {
    "papermill": {
     "duration": 0.040268,
     "end_time": "2024-05-21T10:07:20.628640",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.588372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To implement a probabilistic sampling process, we can now replace the argmax with the multinomial function in PyTorch:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d402537c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.710483Z",
     "iopub.status.busy": "2024-05-21T10:07:20.710105Z",
     "iopub.status.idle": "2024-05-21T10:07:20.716770Z",
     "shell.execute_reply": "2024-05-21T10:07:20.715770Z"
    },
    "papermill": {
     "duration": 0.049846,
     "end_time": "2024-05-21T10:07:20.718628",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.668782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "toward\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123) \n",
    "next_token_id = torch.multinomial(probas, num_samples=1).item()\n",
    "print(inverse_vocab[next_token_id])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "4d69c5e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.800206Z",
     "iopub.status.busy": "2024-05-21T10:07:20.799909Z",
     "iopub.status.idle": "2024-05-21T10:07:20.840071Z",
     "shell.execute_reply": "2024-05-21T10:07:20.839053Z"
    },
    "papermill": {
     "duration": 0.083586,
     "end_time": "2024-05-21T10:07:20.842326",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.758740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71 x closer\n",
      "2 x every\n",
      "0 x effort\n",
      "544 x forward\n",
      "2 x inches\n",
      "1 x moves\n",
      "0 x pizza\n",
      "376 x toward\n",
      "4 x you\n"
     ]
    }
   ],
   "source": [
    "def print_sampled_tokens(probas):\n",
    "    torch.manual_seed(123)\n",
    "    sample = [torch.multinomial(probas, num_samples=1).item() for i in range(1_000)]\n",
    "    sampled_ids = torch.bincount(torch.tensor(sample))\n",
    "    for i, freq in enumerate(sampled_ids):\n",
    "        print(f\"{freq} x {inverse_vocab[i]}\")\n",
    "print_sampled_tokens(probas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "324fe58a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:20.925823Z",
     "iopub.status.busy": "2024-05-21T10:07:20.925466Z",
     "iopub.status.idle": "2024-05-21T10:07:20.930169Z",
     "shell.execute_reply": "2024-05-21T10:07:20.929296Z"
    },
    "papermill": {
     "duration": 0.048311,
     "end_time": "2024-05-21T10:07:20.932083",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.883772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def softmax_with_temperature(logits, temperature):\n",
    "    scaled_logits = logits / temperature\n",
    "    return torch.softmax(scaled_logits, dim=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b572b831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.014844Z",
     "iopub.status.busy": "2024-05-21T10:07:21.014484Z",
     "iopub.status.idle": "2024-05-21T10:07:21.369369Z",
     "shell.execute_reply": "2024-05-21T10:07:21.368506Z"
    },
    "papermill": {
     "duration": 0.398645,
     "end_time": "2024-05-21T10:07:21.371553",
     "exception": false,
     "start_time": "2024-05-21T10:07:20.972908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "temperatures = [1, 0.1, 5]  # Original, higher, and lower temperature\n",
    "scaled_probas = [softmax_with_temperature(next_token_logits, T) for T in temperatures]\n",
    "x = torch.arange(len(vocab))\n",
    "bar_width = 0.15\n",
    "fig, ax = plt.subplots(figsize=(5, 3))\n",
    "for i, T in enumerate(temperatures):\n",
    "    rects = ax.bar(x + i * bar_width, scaled_probas[i], \n",
    "                   bar_width, label=f'Temperature = {T}')\n",
    "ax.set_ylabel('Probability')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(vocab.keys(), rotation=90)\n",
    "ax.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "406800f3",
   "metadata": {
    "papermill": {
     "duration": 0.040372,
     "end_time": "2024-05-21T10:07:21.454291",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.413919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Top-k sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "70ebb1de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.538249Z",
     "iopub.status.busy": "2024-05-21T10:07:21.537578Z",
     "iopub.status.idle": "2024-05-21T10:07:21.546915Z",
     "shell.execute_reply": "2024-05-21T10:07:21.545955Z"
    },
    "papermill": {
     "duration": 0.053723,
     "end_time": "2024-05-21T10:07:21.548842",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.495119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top logits: tensor([6.7500, 6.2800, 4.5100])\n",
      "Top positions: tensor([3, 7, 0])\n"
     ]
    }
   ],
   "source": [
    "top_k = 3\n",
    "top_logits, top_pos = torch.topk(next_token_logits, top_k)\n",
    "print(\"Top logits:\", top_logits)\n",
    "print(\"Top positions:\", top_pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a55eab11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.632869Z",
     "iopub.status.busy": "2024-05-21T10:07:21.632510Z",
     "iopub.status.idle": "2024-05-21T10:07:21.641763Z",
     "shell.execute_reply": "2024-05-21T10:07:21.640809Z"
    },
    "papermill": {
     "duration": 0.053694,
     "end_time": "2024-05-21T10:07:21.643686",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.589992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([4.5100,   -inf,   -inf, 6.7500,   -inf,   -inf,   -inf, 6.2800,   -inf])\n"
     ]
    }
   ],
   "source": [
    "new_logits = torch.where(\n",
    "    condition=next_token_logits < top_logits[-1],\n",
    "    input=torch.tensor(float('-inf')),\n",
    "    other=next_token_logits\n",
    ")\n",
    "print(new_logits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "abd5ce02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.726101Z",
     "iopub.status.busy": "2024-05-21T10:07:21.725790Z",
     "iopub.status.idle": "2024-05-21T10:07:21.731425Z",
     "shell.execute_reply": "2024-05-21T10:07:21.730477Z"
    },
    "papermill": {
     "duration": 0.049036,
     "end_time": "2024-05-21T10:07:21.733383",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.684347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([0.0615, 0.0000, 0.0000, 0.5775, 0.0000, 0.0000, 0.0000, 0.3610, 0.0000])\n"
     ]
    }
   ],
   "source": [
    "topk_probas = torch.softmax(new_logits, dim=0)\n",
    "print(topk_probas)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7497ad5",
   "metadata": {
    "papermill": {
     "duration": 0.04105,
     "end_time": "2024-05-21T10:07:21.815087",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.774037",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modifying the text generation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "0975a98c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.898458Z",
     "iopub.status.busy": "2024-05-21T10:07:21.897750Z",
     "iopub.status.idle": "2024-05-21T10:07:21.906138Z",
     "shell.execute_reply": "2024-05-21T10:07:21.905232Z"
    },
    "papermill": {
     "duration": 0.052201,
     "end_time": "2024-05-21T10:07:21.908045",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.855844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate(model, idx, max_new_tokens, context_size, temperature, top_k=None):\n",
    "    for _ in range(max_new_tokens):\n",
    "        idx_cond = idx[:, -context_size:]\n",
    "        with torch.no_grad():\n",
    "            logits = model(idx_cond)\n",
    "        logits = logits[:, -1, :]\n",
    "        if top_k is not None:\n",
    "            top_logits, _ = torch.topk(logits, top_k)\n",
    "            min_val = top_logits[:, -1]\n",
    "            logits = torch.where(\n",
    "                logits < min_val,\n",
    "                torch.tensor(float('-inf')).to(logits.device),\n",
    "                logits\n",
    "            )\n",
    "        if temperature > 0.0:\n",
    "            logits = logits / temperature\n",
    "            probs = torch.softmax(logits, dim=-1)\n",
    "            idx_next = torch.multinomial(probs, num_samples=1)\n",
    "        else:\n",
    "            idx_next = torch.argmax(logits, dim=-1, keepdim=True)\n",
    "        idx = torch.cat((idx, idx_next), dim=1)\n",
    "    return idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e80de5e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:21.993077Z",
     "iopub.status.busy": "2024-05-21T10:07:21.992190Z",
     "iopub.status.idle": "2024-05-21T10:07:23.344120Z",
     "shell.execute_reply": "2024-05-21T10:07:23.343128Z"
    },
    "papermill": {
     "duration": 1.396849,
     "end_time": "2024-05-21T10:07:23.346570",
     "exception": false,
     "start_time": "2024-05-21T10:07:21.949721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output text:\n",
      " Every effort moves you know began to go a little wild--I felt nervous and uncertain.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "token_ids = generate(\n",
    "    model=model,\n",
    "    idx=text_to_token_ids(\"Every effort moves you\", tokenizer),\n",
    "    max_new_tokens=15,\n",
    "    context_size=GPT_CONFIG_124M[\"ctx_len\"],\n",
    "    top_k=25,\n",
    "    temperature=1.4\n",
    ")\n",
    "print(\"Output text:\\n\", token_ids_to_text(token_ids, tokenizer))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdff2fb3",
   "metadata": {
    "papermill": {
     "duration": 0.040941,
     "end_time": "2024-05-21T10:07:23.431841",
     "exception": false,
     "start_time": "2024-05-21T10:07:23.390900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fortunately, saving a PyTorch model is relatively straightforward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "79a999b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:23.516473Z",
     "iopub.status.busy": "2024-05-21T10:07:23.515722Z",
     "iopub.status.idle": "2024-05-21T10:07:24.211771Z",
     "shell.execute_reply": "2024-05-21T10:07:24.210725Z"
    },
    "papermill": {
     "duration": 0.740908,
     "end_time": "2024-05-21T10:07:24.214138",
     "exception": false,
     "start_time": "2024-05-21T10:07:23.473230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.save(model.state_dict(), \"model.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b3d06330",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:24.298220Z",
     "iopub.status.busy": "2024-05-21T10:07:24.297861Z",
     "iopub.status.idle": "2024-05-21T10:07:26.330483Z",
     "shell.execute_reply": "2024-05-21T10:07:26.329497Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 2.076804,
     "end_time": "2024-05-21T10:07:26.332554",
     "exception": false,
     "start_time": "2024-05-21T10:07:24.255750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPTModel(\n",
       "  (tok_emb): Embedding(50257, 768)\n",
       "  (pos_emb): Embedding(256, 768)\n",
       "  (drop_emb): Dropout(p=0.1, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (1): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (2): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (3): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (4): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (5): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (6): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (7): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (8): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (9): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (10): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (11): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "  )\n",
       "  (final_norm): LayerNorm()\n",
       "  (out_head): Linear(in_features=768, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = GPTModel(GPT_CONFIG_124M)\n",
    "model.load_state_dict(torch.load(\"model.pth\"))\n",
    "model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "91984d08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:26.420192Z",
     "iopub.status.busy": "2024-05-21T10:07:26.419533Z",
     "iopub.status.idle": "2024-05-21T10:07:29.200579Z",
     "shell.execute_reply": "2024-05-21T10:07:29.199716Z"
    },
    "papermill": {
     "duration": 2.827887,
     "end_time": "2024-05-21T10:07:29.202845",
     "exception": false,
     "start_time": "2024-05-21T10:07:26.374958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.save({\n",
    "    \"model_state_dict\": model.state_dict(),\n",
    "    \"optimizer_state_dict\": optimizer.state_dict(),\n",
    "    }, \n",
    "    \"model_and_optimizer.pth\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ec31b76a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:29.288373Z",
     "iopub.status.busy": "2024-05-21T10:07:29.287756Z",
     "iopub.status.idle": "2024-05-21T10:07:33.379322Z",
     "shell.execute_reply": "2024-05-21T10:07:33.378294Z"
    },
    "papermill": {
     "duration": 4.138053,
     "end_time": "2024-05-21T10:07:33.383367",
     "exception": false,
     "start_time": "2024-05-21T10:07:29.245314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "checkpoint = torch.load(\"model_and_optimizer.pth\")\n",
    "model = GPTModel(GPT_CONFIG_124M)\n",
    "model.load_state_dict(checkpoint[\"model_state_dict\"])\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=5e-4, weight_decay=0.1)\n",
    "optimizer.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n",
    "model.train();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1a32e888",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:33.487871Z",
     "iopub.status.busy": "2024-05-21T10:07:33.487487Z",
     "iopub.status.idle": "2024-05-21T10:07:48.665514Z",
     "shell.execute_reply": "2024-05-21T10:07:48.664283Z"
    },
    "papermill": {
     "duration": 15.225837,
     "end_time": "2024-05-21T10:07:48.667926",
     "exception": false,
     "start_time": "2024-05-21T10:07:33.442089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install tensorflow>=2.15.0  tqdm>=4.66"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "34634739",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:48.754874Z",
     "iopub.status.busy": "2024-05-21T10:07:48.753795Z",
     "iopub.status.idle": "2024-05-21T10:07:48.931275Z",
     "shell.execute_reply": "2024-05-21T10:07:48.930292Z"
    },
    "papermill": {
     "duration": 0.222636,
     "end_time": "2024-05-21T10:07:48.933404",
     "exception": false,
     "start_time": "2024-05-21T10:07:48.710768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('gpt_download.py', <http.client.HTTPMessage at 0x7fd1a043f430>)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import urllib.request\n",
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/\"\n",
    "    \"LLMs-from-scratch/main/ch05/\"\n",
    "    \"01_main-chapter-code/gpt_download.py\"\n",
    ")\n",
    "filename = url.split('/')[-1]\n",
    "urllib.request.urlretrieve(url, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d2cbc16b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:07:49.018895Z",
     "iopub.status.busy": "2024-05-21T10:07:49.018229Z",
     "iopub.status.idle": "2024-05-21T10:08:17.703951Z",
     "shell.execute_reply": "2024-05-21T10:08:17.702803Z"
    },
    "papermill": {
     "duration": 28.730978,
     "end_time": "2024-05-21T10:08:17.706497",
     "exception": false,
     "start_time": "2024-05-21T10:07:48.975519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-21 10:07:50.733370: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-21 10:07:50.733472: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-21 10:07:50.861541: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "checkpoint: 100%|██████████| 77.0/77.0 [00:00<00:00, 45.5kiB/s]\n",
      "encoder.json: 100%|██████████| 1.04M/1.04M [00:00<00:00, 1.99MiB/s]\n",
      "hparams.json: 100%|██████████| 90.0/90.0 [00:00<00:00, 57.9kiB/s]\n",
      "model.ckpt.data-00000-of-00001: 100%|██████████| 498M/498M [00:14<00:00, 33.6MiB/s]\n",
      "model.ckpt.index: 100%|██████████| 5.21k/5.21k [00:00<00:00, 2.16MiB/s]\n",
      "model.ckpt.meta: 100%|██████████| 471k/471k [00:00<00:00, 1.45MiB/s]\n",
      "vocab.bpe: 100%|██████████| 456k/456k [00:00<00:00, 1.22MiB/s]\n"
     ]
    }
   ],
   "source": [
    "from gpt_download import download_and_load_gpt2\n",
    "settings, params = download_and_load_gpt2(model_size=\"124M\", models_dir=\"gpt2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "fb3c4deb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:17.816667Z",
     "iopub.status.busy": "2024-05-21T10:08:17.815516Z",
     "iopub.status.idle": "2024-05-21T10:08:17.821209Z",
     "shell.execute_reply": "2024-05-21T10:08:17.820166Z"
    },
    "papermill": {
     "duration": 0.062267,
     "end_time": "2024-05-21T10:08:17.823169",
     "exception": false,
     "start_time": "2024-05-21T10:08:17.760902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Settings: {'n_vocab': 50257, 'n_ctx': 1024, 'n_embd': 768, 'n_head': 12, 'n_layer': 12}\n",
      "Parameter dictionary keys: dict_keys(['blocks', 'b', 'g', 'wpe', 'wte'])\n"
     ]
    }
   ],
   "source": [
    "print(\"Settings:\", settings)\n",
    "print(\"Parameter dictionary keys:\", params.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "b4fb4db8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:17.934341Z",
     "iopub.status.busy": "2024-05-21T10:08:17.933465Z",
     "iopub.status.idle": "2024-05-21T10:08:17.939538Z",
     "shell.execute_reply": "2024-05-21T10:08:17.938609Z"
    },
    "papermill": {
     "duration": 0.063764,
     "end_time": "2024-05-21T10:08:17.941771",
     "exception": false,
     "start_time": "2024-05-21T10:08:17.878007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.11010301 -0.03926672  0.03310751 ... -0.1363697   0.01506208\n",
      "   0.04531523]\n",
      " [ 0.04034033 -0.04861503  0.04624869 ...  0.08605453  0.00253983\n",
      "   0.04318958]\n",
      " [-0.12746179  0.04793796  0.18410145 ...  0.08991534 -0.12972379\n",
      "  -0.08785918]\n",
      " ...\n",
      " [-0.04453601 -0.05483596  0.01225674 ...  0.10435229  0.09783269\n",
      "  -0.06952604]\n",
      " [ 0.1860082   0.01665728  0.04611587 ... -0.09625227  0.07847701\n",
      "  -0.02245961]\n",
      " [ 0.05135201 -0.02768905  0.0499369  ...  0.00704835  0.15519823\n",
      "   0.12067825]]\n",
      "Token embedding weight tensor dimensions: (50257, 768)\n"
     ]
    }
   ],
   "source": [
    "print(params[\"wte\"])\n",
    "print(\"Token embedding weight tensor dimensions:\", params[\"wte\"].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ee8f446f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.051013Z",
     "iopub.status.busy": "2024-05-21T10:08:18.050428Z",
     "iopub.status.idle": "2024-05-21T10:08:18.055995Z",
     "shell.execute_reply": "2024-05-21T10:08:18.055134Z"
    },
    "papermill": {
     "duration": 0.062108,
     "end_time": "2024-05-21T10:08:18.057954",
     "exception": false,
     "start_time": "2024-05-21T10:08:17.995846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_configs = {\n",
    "    \"gpt2-small (124M)\": {\"emb_dim\": 768, \"n_layers\": 12, \"n_heads\": 12},\n",
    "    \"gpt2-medium (355M)\": {\"emb_dim\": 1024, \"n_layers\": 24, \"n_heads\": 16},\n",
    "    \"gpt2-large (774M)\": {\"emb_dim\": 1280, \"n_layers\": 36, \"n_heads\": 20},\n",
    "    \"gpt2-xl (1558M)\": {\"emb_dim\": 1600, \"n_layers\": 48, \"n_heads\": 25},\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "70a1b29c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.169433Z",
     "iopub.status.busy": "2024-05-21T10:08:18.168749Z",
     "iopub.status.idle": "2024-05-21T10:08:18.175807Z",
     "shell.execute_reply": "2024-05-21T10:08:18.174871Z"
    },
    "papermill": {
     "duration": 0.065321,
     "end_time": "2024-05-21T10:08:18.177708",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.112387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'vocab_size': 50257,\n",
       " 'ctx_len': 256,\n",
       " 'emb_dim': 768,\n",
       " 'n_heads': 12,\n",
       " 'n_layers': 12,\n",
       " 'drop_rate': 0.1,\n",
       " 'qkv_bias': False}"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_name = \"gpt2-small (124M)\"\n",
    "NEW_CONFIG = GPT_CONFIG_124M.copy()\n",
    "NEW_CONFIG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "771c644d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.290074Z",
     "iopub.status.busy": "2024-05-21T10:08:18.289116Z",
     "iopub.status.idle": "2024-05-21T10:08:18.295614Z",
     "shell.execute_reply": "2024-05-21T10:08:18.294667Z"
    },
    "papermill": {
     "duration": 0.064247,
     "end_time": "2024-05-21T10:08:18.297560",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.233313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'vocab_size': 50257,\n",
       " 'ctx_len': 256,\n",
       " 'emb_dim': 768,\n",
       " 'n_heads': 12,\n",
       " 'n_layers': 12,\n",
       " 'drop_rate': 0.1,\n",
       " 'qkv_bias': False}"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NEW_CONFIG.update(model_configs[model_name])\n",
    "NEW_CONFIG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b5821c14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.407970Z",
     "iopub.status.busy": "2024-05-21T10:08:18.407141Z",
     "iopub.status.idle": "2024-05-21T10:08:18.411857Z",
     "shell.execute_reply": "2024-05-21T10:08:18.410886Z"
    },
    "papermill": {
     "duration": 0.062316,
     "end_time": "2024-05-21T10:08:18.413755",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.351439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "NEW_CONFIG.update({\"ctx_len\": 1024})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "8ed156ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.524607Z",
     "iopub.status.busy": "2024-05-21T10:08:18.523725Z",
     "iopub.status.idle": "2024-05-21T10:08:18.528371Z",
     "shell.execute_reply": "2024-05-21T10:08:18.527351Z"
    },
    "papermill": {
     "duration": 0.062273,
     "end_time": "2024-05-21T10:08:18.530394",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.468121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "NEW_CONFIG.update({\"qkv_bias\": True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "41aa7006",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.642020Z",
     "iopub.status.busy": "2024-05-21T10:08:18.641176Z",
     "iopub.status.idle": "2024-05-21T10:08:18.647745Z",
     "shell.execute_reply": "2024-05-21T10:08:18.646852Z"
    },
    "papermill": {
     "duration": 0.063493,
     "end_time": "2024-05-21T10:08:18.649754",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.586261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'vocab_size': 50257,\n",
       " 'ctx_len': 1024,\n",
       " 'emb_dim': 768,\n",
       " 'n_heads': 12,\n",
       " 'n_layers': 12,\n",
       " 'drop_rate': 0.1,\n",
       " 'qkv_bias': True}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NEW_CONFIG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "797aacb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:18.759737Z",
     "iopub.status.busy": "2024-05-21T10:08:18.759339Z",
     "iopub.status.idle": "2024-05-21T10:08:20.491272Z",
     "shell.execute_reply": "2024-05-21T10:08:20.490261Z"
    },
    "papermill": {
     "duration": 1.790235,
     "end_time": "2024-05-21T10:08:20.493449",
     "exception": false,
     "start_time": "2024-05-21T10:08:18.703214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPTModel(\n",
       "  (tok_emb): Embedding(50257, 768)\n",
       "  (pos_emb): Embedding(1024, 768)\n",
       "  (drop_emb): Dropout(p=0.1, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (1): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (2): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (3): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (4): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (5): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (6): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (7): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (8): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (9): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (10): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (11): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "  )\n",
       "  (final_norm): LayerNorm()\n",
       "  (out_head): Linear(in_features=768, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gpt = GPTModel(NEW_CONFIG)\n",
    "gpt.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "dc1fc07f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:20.606845Z",
     "iopub.status.busy": "2024-05-21T10:08:20.605955Z",
     "iopub.status.idle": "2024-05-21T10:08:20.611329Z",
     "shell.execute_reply": "2024-05-21T10:08:20.610424Z"
    },
    "papermill": {
     "duration": 0.064301,
     "end_time": "2024-05-21T10:08:20.613175",
     "exception": false,
     "start_time": "2024-05-21T10:08:20.548874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def assign(left, right):\n",
    "    if left.shape != right.shape:\n",
    "        raise ValueError(f\"Shape mismatch. Left: {left.shape}, Right: {right.shape}\")\n",
    "    return torch.nn.Parameter(torch.tensor(right))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "6471dfc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:20.726071Z",
     "iopub.status.busy": "2024-05-21T10:08:20.725210Z",
     "iopub.status.idle": "2024-05-21T10:08:20.744117Z",
     "shell.execute_reply": "2024-05-21T10:08:20.743201Z"
    },
    "papermill": {
     "duration": 0.077608,
     "end_time": "2024-05-21T10:08:20.746096",
     "exception": false,
     "start_time": "2024-05-21T10:08:20.668488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    " \n",
    "def load_weights_into_gpt(gpt, params):\n",
    "    gpt.pos_emb.weight = assign(gpt.pos_emb.weight, params['wpe'])\n",
    "    gpt.tok_emb.weight = assign(gpt.tok_emb.weight, params['wte'])\n",
    "    \n",
    "    for b in range(len(params[\"blocks\"])):\n",
    "        q_w, k_w, v_w = np.split(\n",
    "            (params[\"blocks\"][b][\"attn\"][\"c_attn\"])[\"w\"], 3, axis=-1)\n",
    "        gpt.trf_blocks[b].att.W_query.weight = assign(\n",
    "            gpt.trf_blocks[b].att.W_query.weight, q_w.T)\n",
    "        gpt.trf_blocks[b].att.W_key.weight = assign(\n",
    "            gpt.trf_blocks[b].att.W_key.weight, k_w.T)\n",
    "        gpt.trf_blocks[b].att.W_value.weight = assign(\n",
    "            gpt.trf_blocks[b].att.W_value.weight, v_w.T)\n",
    " \n",
    "        q_b, k_b, v_b = np.split(\n",
    "            (params[\"blocks\"][b][\"attn\"][\"c_attn\"])[\"b\"], 3, axis=-1)\n",
    "        gpt.trf_blocks[b].att.W_query.bias = assign(\n",
    "            gpt.trf_blocks[b].att.W_query.bias, q_b)\n",
    "        gpt.trf_blocks[b].att.W_key.bias = assign(\n",
    "            gpt.trf_blocks[b].att.W_key.bias, k_b)\n",
    "        gpt.trf_blocks[b].att.W_value.bias = assign(\n",
    "            gpt.trf_blocks[b].att.W_value.bias, v_b)\n",
    " \n",
    "        gpt.trf_blocks[b].att.out_proj.weight = assign(\n",
    "            gpt.trf_blocks[b].att.out_proj.weight, \n",
    "            params[\"blocks\"][b][\"attn\"][\"c_proj\"][\"w\"].T)\n",
    "        gpt.trf_blocks[b].att.out_proj.bias = assign(\n",
    "            gpt.trf_blocks[b].att.out_proj.bias, \n",
    "            params[\"blocks\"][b][\"attn\"][\"c_proj\"][\"b\"])\n",
    " \n",
    "        gpt.trf_blocks[b].ff.layers[0].weight = assign(\n",
    "            gpt.trf_blocks[b].ff.layers[0].weight, \n",
    "            params[\"blocks\"][b][\"mlp\"][\"c_fc\"][\"w\"].T)\n",
    "        gpt.trf_blocks[b].ff.layers[0].bias = assign(\n",
    "            gpt.trf_blocks[b].ff.layers[0].bias, \n",
    "            params[\"blocks\"][b][\"mlp\"][\"c_fc\"][\"b\"])\n",
    "        gpt.trf_blocks[b].ff.layers[2].weight = assign(\n",
    "            gpt.trf_blocks[b].ff.layers[2].weight, \n",
    "            params[\"blocks\"][b][\"mlp\"][\"c_proj\"][\"w\"].T)\n",
    "        gpt.trf_blocks[b].ff.layers[2].bias = assign(\n",
    "            gpt.trf_blocks[b].ff.layers[2].bias, \n",
    "            params[\"blocks\"][b][\"mlp\"][\"c_proj\"][\"b\"])\n",
    " \n",
    "        gpt.trf_blocks[b].norm1.scale = assign(\n",
    "            gpt.trf_blocks[b].norm1.scale, \n",
    "            params[\"blocks\"][b][\"ln_1\"][\"g\"])\n",
    "        gpt.trf_blocks[b].norm1.shift = assign(\n",
    "            gpt.trf_blocks[b].norm1.shift, \n",
    "            params[\"blocks\"][b][\"ln_1\"][\"b\"])\n",
    "        gpt.trf_blocks[b].norm2.scale = assign(\n",
    "            gpt.trf_blocks[b].norm2.scale, \n",
    "            params[\"blocks\"][b][\"ln_2\"][\"g\"])\n",
    "        gpt.trf_blocks[b].norm2.shift = assign(\n",
    "            gpt.trf_blocks[b].norm2.shift, \n",
    "            params[\"blocks\"][b][\"ln_2\"][\"b\"])\n",
    " \n",
    "    gpt.final_norm.scale = assign(gpt.final_norm.scale, params[\"g\"])\n",
    "    gpt.final_norm.shift = assign(gpt.final_norm.shift, params[\"b\"])\n",
    "    gpt.out_head.weight = assign(gpt.out_head.weight, params[\"wte\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "7b173de2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:20.857868Z",
     "iopub.status.busy": "2024-05-21T10:08:20.857520Z",
     "iopub.status.idle": "2024-05-21T10:08:23.167145Z",
     "shell.execute_reply": "2024-05-21T10:08:23.165851Z"
    },
    "papermill": {
     "duration": 2.367659,
     "end_time": "2024-05-21T10:08:23.169266",
     "exception": false,
     "start_time": "2024-05-21T10:08:20.801607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output text:\n",
      " who are you? met PDT\u001f overcame cocktailsutsche rampantiscovery Cant milestones undesirable MunichByte belovedHoweverosph courageousnexpected Adelaide Elvis sheds Xer antibioticsReplaries\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "token_ids = generate(\n",
    "    model=gpt,\n",
    "    idx=text_to_token_ids(\"who are you?\", tokenizer),\n",
    "    max_new_tokens=25,\n",
    "    context_size=NEW_CONFIG[\"ctx_len\"],\n",
    "    top_k=50,\n",
    "    temperature=1.5\n",
    ")\n",
    "print(\"Output text:\\n\", token_ids_to_text(token_ids, tokenizer))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ce8abd7",
   "metadata": {
    "papermill": {
     "duration": 0.054342,
     "end_time": "2024-05-21T10:08:23.278993",
     "exception": false,
     "start_time": "2024-05-21T10:08:23.224651",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "# Alternative Weight Loading from Hugging Face Model Hub using Transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "143e4b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:23.389821Z",
     "iopub.status.busy": "2024-05-21T10:08:23.389102Z",
     "iopub.status.idle": "2024-05-21T10:08:27.046760Z",
     "shell.execute_reply": "2024-05-21T10:08:27.045810Z"
    },
    "papermill": {
     "duration": 3.714907,
     "end_time": "2024-05-21T10:08:27.048817",
     "exception": false,
     "start_time": "2024-05-21T10:08:23.333910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8f669ac2480046989d6138ab22a90ce3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/665 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8545b6376f7d4ae8898508b92e9aba11",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/548M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "GPT2Model(\n",
       "  (wte): Embedding(50257, 768)\n",
       "  (wpe): Embedding(1024, 768)\n",
       "  (drop): Dropout(p=0.1, inplace=False)\n",
       "  (h): ModuleList(\n",
       "    (0-11): 12 x GPT2Block(\n",
       "      (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n",
       "      (attn): GPT2Attention(\n",
       "        (c_attn): Conv1D()\n",
       "        (c_proj): Conv1D()\n",
       "        (attn_dropout): Dropout(p=0.1, inplace=False)\n",
       "        (resid_dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n",
       "      (mlp): GPT2MLP(\n",
       "        (c_fc): Conv1D()\n",
       "        (c_proj): Conv1D()\n",
       "        (act): NewGELUActivation()\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "    )\n",
       "  )\n",
       "  (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n",
       ")"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from transformers import GPT2Model\n",
    "\n",
    "\n",
    "# allowed model names\n",
    "model_names = {\n",
    "    \"gpt2-small (124M)\": \"openai-community/gpt2\",\n",
    "    \"gpt2-medium (355M)\": \"openai-community/gpt2-medium\",\n",
    "    \"gpt2-large (774M)\": \"openai-community/gpt2-large\",\n",
    "    \"gpt2-xl (1558M)\": \"openai-community/gpt2-xl\"\n",
    "}\n",
    "\n",
    "CHOOSE_MODEL = \"gpt2-small (124M)\"\n",
    "\n",
    "gpt_hf = GPT2Model.from_pretrained(model_names[CHOOSE_MODEL], cache_dir=\"checkpoints\")\n",
    "gpt_hf.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d3cbf976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:27.161601Z",
     "iopub.status.busy": "2024-05-21T10:08:27.161267Z",
     "iopub.status.idle": "2024-05-21T10:08:27.167590Z",
     "shell.execute_reply": "2024-05-21T10:08:27.166702Z"
    },
    "papermill": {
     "duration": 0.064684,
     "end_time": "2024-05-21T10:08:27.169645",
     "exception": false,
     "start_time": "2024-05-21T10:08:27.104961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "BASE_CONFIG = {\n",
    "    \"vocab_size\": 50257,    # Vocabulary size\n",
    "    \"ctx_len\": 1024, # Context length\n",
    "    \"drop_rate\": 0.0,       # Dropout rate\n",
    "    \"qkv_bias\": True        # Query-key-value bias\n",
    "}\n",
    "\n",
    "\n",
    "CHOOSE_MODEL = \"gpt2-small\"\n",
    "\n",
    "model_configs = {\n",
    "    \"gpt2-small\": {\"emb_dim\": 768, \"n_layers\": 12, \"n_heads\": 12},\n",
    "    \"gpt2-medium\": {\"emb_dim\": 1024, \"n_layers\": 24, \"n_heads\": 16},\n",
    "    \"gpt2-large\": {\"emb_dim\": 1280, \"n_layers\": 36, \"n_heads\": 20},\n",
    "    \"gpt2-xl\": {\"emb_dim\": 1600, \"n_layers\": 48, \"n_heads\": 25},\n",
    "}\n",
    "\n",
    "\n",
    "BASE_CONFIG.update(model_configs[CHOOSE_MODEL])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b1c526d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:27.281974Z",
     "iopub.status.busy": "2024-05-21T10:08:27.281059Z",
     "iopub.status.idle": "2024-05-21T10:08:27.286147Z",
     "shell.execute_reply": "2024-05-21T10:08:27.285284Z"
    },
    "papermill": {
     "duration": 0.063057,
     "end_time": "2024-05-21T10:08:27.288010",
     "exception": false,
     "start_time": "2024-05-21T10:08:27.224953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def assign_check(left, right):\n",
    "    if left.shape != right.shape:\n",
    "        raise ValueError(f\"Shape mismatch. Left: {left.shape}, Right: {right.shape}\")\n",
    "    return torch.nn.Parameter(torch.tensor(right))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7ac06f28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:27.399467Z",
     "iopub.status.busy": "2024-05-21T10:08:27.398606Z",
     "iopub.status.idle": "2024-05-21T10:08:27.415504Z",
     "shell.execute_reply": "2024-05-21T10:08:27.414607Z"
    },
    "papermill": {
     "duration": 0.074747,
     "end_time": "2024-05-21T10:08:27.417530",
     "exception": false,
     "start_time": "2024-05-21T10:08:27.342783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def load_weights(gpt, gpt_hf):\n",
    "\n",
    "    d = gpt_hf.state_dict()\n",
    "\n",
    "    gpt.pos_emb.weight = assign_check(gpt.pos_emb.weight, d[\"wpe.weight\"])\n",
    "    gpt.tok_emb.weight = assign_check(gpt.tok_emb.weight, d[\"wte.weight\"])\n",
    "    \n",
    "    for b in range(BASE_CONFIG[\"n_layers\"]):\n",
    "        q_w, k_w, v_w = np.split(d[f\"h.{b}.attn.c_attn.weight\"], 3, axis=-1)\n",
    "        gpt.trf_blocks[b].att.W_query.weight = assign_check(gpt.trf_blocks[b].att.W_query.weight, q_w.T)\n",
    "        gpt.trf_blocks[b].att.W_key.weight = assign_check(gpt.trf_blocks[b].att.W_key.weight, k_w.T)\n",
    "        gpt.trf_blocks[b].att.W_value.weight = assign_check(gpt.trf_blocks[b].att.W_value.weight, v_w.T)\n",
    "    \n",
    "        q_b, k_b, v_b = np.split(d[f\"h.{b}.attn.c_attn.bias\"], 3, axis=-1)\n",
    "        gpt.trf_blocks[b].att.W_query.bias = assign_check(gpt.trf_blocks[b].att.W_query.bias, q_b)\n",
    "        gpt.trf_blocks[b].att.W_key.bias = assign_check(gpt.trf_blocks[b].att.W_key.bias, k_b)\n",
    "        gpt.trf_blocks[b].att.W_value.bias = assign_check(gpt.trf_blocks[b].att.W_value.bias, v_b)\n",
    "    \n",
    "    \n",
    "        gpt.trf_blocks[b].att.out_proj.weight = assign_check(gpt.trf_blocks[b].att.out_proj.weight, d[f\"h.{b}.attn.c_proj.weight\"].T)\n",
    "        gpt.trf_blocks[b].att.out_proj.bias = assign_check(gpt.trf_blocks[b].att.out_proj.bias, d[f\"h.{b}.attn.c_proj.bias\"])\n",
    "    \n",
    "        gpt.trf_blocks[b].ff.layers[0].weight = assign_check(gpt.trf_blocks[b].ff.layers[0].weight, d[f\"h.{b}.mlp.c_fc.weight\"].T)\n",
    "        gpt.trf_blocks[b].ff.layers[0].bias = assign_check(gpt.trf_blocks[b].ff.layers[0].bias, d[f\"h.{b}.mlp.c_fc.bias\"])\n",
    "        gpt.trf_blocks[b].ff.layers[2].weight = assign_check(gpt.trf_blocks[b].ff.layers[2].weight, d[f\"h.{b}.mlp.c_proj.weight\"].T)\n",
    "        gpt.trf_blocks[b].ff.layers[2].bias = assign_check(gpt.trf_blocks[b].ff.layers[2].bias, d[f\"h.{b}.mlp.c_proj.bias\"])\n",
    "    \n",
    "        gpt.trf_blocks[b].norm1.scale = assign_check(gpt.trf_blocks[b].norm1.scale, d[f\"h.{b}.ln_1.weight\"])\n",
    "        gpt.trf_blocks[b].norm1.shift = assign_check(gpt.trf_blocks[b].norm1.shift, d[f\"h.{b}.ln_1.bias\"])\n",
    "        gpt.trf_blocks[b].norm2.scale = assign_check(gpt.trf_blocks[b].norm2.scale, d[f\"h.{b}.ln_2.weight\"])\n",
    "        gpt.trf_blocks[b].norm2.shift = assign_check(gpt.trf_blocks[b].norm2.shift, d[f\"h.{b}.ln_2.bias\"])\n",
    "    \n",
    "        gpt.final_norm.scale = assign_check(gpt.final_norm.scale, d[f\"ln_f.weight\"])\n",
    "        gpt.final_norm.shift = assign_check(gpt.final_norm.shift, d[f\"ln_f.bias\"])\n",
    "        gpt.out_head.weight = assign_check(gpt.out_head.weight, d[\"wte.weight\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "25cc4a71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:27.529472Z",
     "iopub.status.busy": "2024-05-21T10:08:27.529002Z",
     "iopub.status.idle": "2024-05-21T10:08:30.014663Z",
     "shell.execute_reply": "2024-05-21T10:08:30.013588Z"
    },
    "papermill": {
     "duration": 2.544668,
     "end_time": "2024-05-21T10:08:30.017192",
     "exception": false,
     "start_time": "2024-05-21T10:08:27.472524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/3877979348.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  return torch.nn.Parameter(torch.tensor(right))\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "\n",
    "gpt = GPTModel(BASE_CONFIG)\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "load_weights(gpt, gpt_hf)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d494c08a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T10:08:30.130744Z",
     "iopub.status.busy": "2024-05-21T10:08:30.130035Z",
     "iopub.status.idle": "2024-05-21T10:08:43.990890Z",
     "shell.execute_reply": "2024-05-21T10:08:43.989472Z"
    },
    "papermill": {
     "duration": 13.919721,
     "end_time": "2024-05-21T10:08:43.993113",
     "exception": false,
     "start_time": "2024-05-21T10:08:30.073392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output text:\n",
      " সরকারি হিসাবে বাংলাদেশের বর্তমান মাথপিছু আয় ২,৭৮৪ মার্কিন ডলার !! বর্তমান মার্কিন মার্কিন �\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "torch.manual_seed(123)\n",
    "\n",
    "tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
    "\n",
    "token_ids = generate(\n",
    "    model=gpt,\n",
    "    idx=text_to_token_ids(\"সরকারি হিসাবে বাংলাদেশের বর্তমান মাথপিছু আয় ২,৭৮৪ মার্কিন ডলার !!\", tokenizer),\n",
    "    max_new_tokens=50,\n",
    "    context_size=BASE_CONFIG[\"ctx_len\"],\n",
    "    top_k=1,\n",
    "    temperature=1.0\n",
    ")\n",
    "\n",
    "print(\"Output text:\\n\", token_ids_to_text(token_ids, tokenizer))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6bd1796",
   "metadata": {
    "papermill": {
     "duration": 0.056102,
     "end_time": "2024-05-21T10:08:44.108321",
     "exception": false,
     "start_time": "2024-05-21T10:08:44.052219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5039258,
     "sourceId": 8455276,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5045113,
     "sourceId": 8463029,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 216.370924,
   "end_time": "2024-05-21T10:08:47.870212",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-21T10:05:11.499288",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "17cfda1907af49519f97a5cda7f0e91a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2acf0cec070c46aca728e6400de821e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "45e31e5f31884689bc536f2d379c2169": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "478fd02f1a444ca8a25bbd3e86fc0167": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_ff1b52f3a097424087c3979bd7183d6d",
       "placeholder": "​",
       "style": "IPY_MODEL_80d19f815bda4d299e7da0992fef885a",
       "value": " 665/665 [00:00&lt;00:00, 47.7kB/s]"
      }
     },
     "5334c6ba0d69426c9a4bdf78abf2554d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5f6d5a4ae2724d108999769de5fde778",
       "placeholder": "​",
       "style": "IPY_MODEL_45e31e5f31884689bc536f2d379c2169",
       "value": "config.json: 100%"
      }
     },
     "585c1331df8a477391e66ba468e7556b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5c2c61a9d4b4455f953121896bf99314": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_a8ef78399f3343ada9d0fae78bfcbdad",
       "max": 665.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2acf0cec070c46aca728e6400de821e3",
       "value": 665.0
      }
     },
     "5f6d5a4ae2724d108999769de5fde778": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "67c4717869e1482b87c0778f467dc568": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "80d19f815bda4d299e7da0992fef885a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8545b6376f7d4ae8898508b92e9aba11": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a4a4021c145049b5a8e04bf74568861e",
        "IPY_MODEL_a08d6d3bd1f84ee3aa7a45eed34652b8",
        "IPY_MODEL_f4cb2e03990c4baca06df62361116078"
       ],
       "layout": "IPY_MODEL_e51ededa848a4643a941a0d7bda8e333"
      }
     },
     "878270b8f300434f80e08314489fd0f2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8f669ac2480046989d6138ab22a90ce3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5334c6ba0d69426c9a4bdf78abf2554d",
        "IPY_MODEL_5c2c61a9d4b4455f953121896bf99314",
        "IPY_MODEL_478fd02f1a444ca8a25bbd3e86fc0167"
       ],
       "layout": "IPY_MODEL_67c4717869e1482b87c0778f467dc568"
      }
     },
     "a08d6d3bd1f84ee3aa7a45eed34652b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e2d2474274114546a4fff0b67dc96819",
       "max": 548105171.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_585c1331df8a477391e66ba468e7556b",
       "value": 548105171.0
      }
     },
     "a4a4021c145049b5a8e04bf74568861e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b02ea7919b974e2dbd0f9ee36019d9df",
       "placeholder": "​",
       "style": "IPY_MODEL_dc4939f8e5d144f1a5c6dd23a46ed7e8",
       "value": "model.safetensors: 100%"
      }
     },
     "a8ef78399f3343ada9d0fae78bfcbdad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b02ea7919b974e2dbd0f9ee36019d9df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc4939f8e5d144f1a5c6dd23a46ed7e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e2d2474274114546a4fff0b67dc96819": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e51ededa848a4643a941a0d7bda8e333": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f4cb2e03990c4baca06df62361116078": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_878270b8f300434f80e08314489fd0f2",
       "placeholder": "​",
       "style": "IPY_MODEL_17cfda1907af49519f97a5cda7f0e91a",
       "value": " 548M/548M [00:02&lt;00:00, 307MB/s]"
      }
     },
     "ff1b52f3a097424087c3979bd7183d6d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
