{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f521f503",
   "metadata": {
    "papermill": {
     "duration": 0.018881,
     "end_time": "2024-05-20T06:05:51.291323",
     "exception": false,
     "start_time": "2024-05-20T06:05:51.272442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will build GPT-2 with 142 million parameters.\n",
    "\n",
    "Pre-requiremtnts:\n",
    "\n",
    "1. [Tokenizer](https://www.kaggle.com/code/golammostofas/depth-knowledge-on-tokenization)\n",
    "2. [Embedding](https://www.kaggle.com/code/golammostofas/deep-knowledge-on-embedding-for-nlp-or-llms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0ed4e7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:05:51.331027Z",
     "iopub.status.busy": "2024-05-20T06:05:51.330068Z",
     "iopub.status.idle": "2024-05-20T06:05:51.341947Z",
     "shell.execute_reply": "2024-05-20T06:05:51.341242Z"
    },
    "papermill": {
     "duration": 0.033772,
     "end_time": "2024-05-20T06:05:51.343794",
     "exception": false,
     "start_time": "2024-05-20T06:05:51.310022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "GPT_CONFIG_124M = {\n",
    "    'vocab_size': 50257,   # Vucabulary Size\n",
    "    'ctx_len': 1024,       # Context Lenghts\n",
    "    'emb_dim': 768,        # Embedding dimennsion\n",
    "    'n_heads': 12,         # Number of attention head\n",
    "    'n_layers': 12,        # number of Layer\n",
    "    'drop_rate': 0.1,      # Dropout rate\n",
    "    'qkv_bias': False      # Query_Key_value Bias\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dec44425",
   "metadata": {
    "papermill": {
     "duration": 0.018522,
     "end_time": "2024-05-20T06:05:51.381066",
     "exception": false,
     "start_time": "2024-05-20T06:05:51.362544",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A placehodler GPT model architecture class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "03fd9965",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:05:51.420528Z",
     "iopub.status.busy": "2024-05-20T06:05:51.420226Z",
     "iopub.status.idle": "2024-05-20T06:05:54.735160Z",
     "shell.execute_reply": "2024-05-20T06:05:54.734233Z"
    },
    "papermill": {
     "duration": 3.337036,
     "end_time": "2024-05-20T06:05:54.737544",
     "exception": false,
     "start_time": "2024-05-20T06:05:51.400508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "class DummyGPTModel(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.tok_emb = nn.Embedding(cfg['vocab_size'], cfg['emb_dim'])\n",
    "        self.pos_emb = nn.Embedding(cfg['ctx_len'], cfg['emb_dim'])\n",
    "        self.drop_emb = nn.Dropout(cfg['drop_rate'])\n",
    "        \n",
    "        self.trf_blocks = nn.Sequential(\n",
    "            *[DummyTransformerBlock(cfg) for _ in range(cfg['n_layers'])]\n",
    "        )                                                                                   #A\n",
    "        \n",
    "        self.final_norm = DummyLayerNorm(cfg['emb_dim'])                                        #B\n",
    "        self.out_head = nn.Linear(cfg['emb_dim'], cfg['vocab_size'], bias=False)\n",
    "        \n",
    "        \n",
    "    def forward(self, in_idx):\n",
    "        batch_size, seq_len = in_idx.shape\n",
    "        tok_embeds = self.tok_emb(in_idx)\n",
    "        pos_embeds = self.pos_emb(torch.arange(seq_len, device=in_idx.device))\n",
    "\n",
    "        x = tok_embeds + pos_embeds\n",
    "        x = self.drop_emb(x)\n",
    "        x = self.trf_blocks(x)\n",
    "        x = self.final_norm(x)\n",
    "        logits = self.out_head(x)\n",
    "\n",
    "        return logits\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2362f6b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:05:54.776598Z",
     "iopub.status.busy": "2024-05-20T06:05:54.775765Z",
     "iopub.status.idle": "2024-05-20T06:05:54.780775Z",
     "shell.execute_reply": "2024-05-20T06:05:54.779879Z"
    },
    "papermill": {
     "duration": 0.026202,
     "end_time": "2024-05-20T06:05:54.782609",
     "exception": false,
     "start_time": "2024-05-20T06:05:54.756407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class DummyTransformerBlock(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "    \n",
    "    def forward(self, x):\n",
    "        \n",
    "        return x\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5403b850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:05:54.821222Z",
     "iopub.status.busy": "2024-05-20T06:05:54.820955Z",
     "iopub.status.idle": "2024-05-20T06:05:54.825680Z",
     "shell.execute_reply": "2024-05-20T06:05:54.824830Z"
    },
    "papermill": {
     "duration": 0.026541,
     "end_time": "2024-05-20T06:05:54.827654",
     "exception": false,
     "start_time": "2024-05-20T06:05:54.801113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class DummyLayerNorm(nn.Module):\n",
    "    def __init__(self, normalized_shape, eps=1e-5):\n",
    "        super().__init__()\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f838c4b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:05:54.865622Z",
     "iopub.status.busy": "2024-05-20T06:05:54.865343Z",
     "iopub.status.idle": "2024-05-20T06:06:09.509368Z",
     "shell.execute_reply": "2024-05-20T06:06:09.508094Z"
    },
    "papermill": {
     "duration": 14.66588,
     "end_time": "2024-05-20T06:06:09.511930",
     "exception": false,
     "start_time": "2024-05-20T06:05:54.846050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tiktoken\r\n",
      "  Downloading tiktoken-0.7.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\r\n",
      "Requirement already satisfied: regex>=2022.1.18 in /opt/conda/lib/python3.10/site-packages (from tiktoken) (2023.12.25)\r\n",
      "Requirement already satisfied: requests>=2.26.0 in /opt/conda/lib/python3.10/site-packages (from tiktoken) (2.31.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.26.0->tiktoken) (2024.2.2)\r\n",
      "Downloading tiktoken-0.7.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tiktoken\r\n",
      "Successfully installed tiktoken-0.7.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tiktoken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "88a483be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:09.553927Z",
     "iopub.status.busy": "2024-05-20T06:06:09.553501Z",
     "iopub.status.idle": "2024-05-20T06:06:10.842341Z",
     "shell.execute_reply": "2024-05-20T06:06:10.841117Z"
    },
    "papermill": {
     "duration": 1.312423,
     "end_time": "2024-05-20T06:06:10.844614",
     "exception": false,
     "start_time": "2024-05-20T06:06:09.532191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[6109, 3626, 6100,  345],\n",
      "        [6109, 1110, 6622,  257]])\n"
     ]
    }
   ],
   "source": [
    "import tiktoken\n",
    "import torch\n",
    "\n",
    "tokenizer = tiktoken.get_encoding('gpt2')\n",
    "batch = []\n",
    "\n",
    "text1 = 'Every effort moves you'\n",
    "text2 = 'Every day holds a'\n",
    "\n",
    "batch.append(torch.tensor(tokenizer.encode(text1)))\n",
    "batch.append(torch.tensor(tokenizer.encode(text2)))\n",
    "\n",
    "batch = torch.stack(batch, dim=0)\n",
    "print(batch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "03ce8725",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:10.886452Z",
     "iopub.status.busy": "2024-05-20T06:06:10.886124Z",
     "iopub.status.idle": "2024-05-20T06:06:11.708390Z",
     "shell.execute_reply": "2024-05-20T06:06:11.707307Z"
    },
    "papermill": {
     "duration": 0.845796,
     "end_time": "2024-05-20T06:06:11.710731",
     "exception": false,
     "start_time": "2024-05-20T06:06:10.864935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DummyGPTModel(\n",
       "  (tok_emb): Embedding(50257, 768)\n",
       "  (pos_emb): Embedding(1024, 768)\n",
       "  (drop_emb): Dropout(p=0.1, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): DummyTransformerBlock()\n",
       "    (1): DummyTransformerBlock()\n",
       "    (2): DummyTransformerBlock()\n",
       "    (3): DummyTransformerBlock()\n",
       "    (4): DummyTransformerBlock()\n",
       "    (5): DummyTransformerBlock()\n",
       "    (6): DummyTransformerBlock()\n",
       "    (7): DummyTransformerBlock()\n",
       "    (8): DummyTransformerBlock()\n",
       "    (9): DummyTransformerBlock()\n",
       "    (10): DummyTransformerBlock()\n",
       "    (11): DummyTransformerBlock()\n",
       "  )\n",
       "  (final_norm): DummyLayerNorm()\n",
       "  (out_head): Linear(in_features=768, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "model = DummyGPTModel(GPT_CONFIG_124M)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "610114a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:11.755008Z",
     "iopub.status.busy": "2024-05-20T06:06:11.754623Z",
     "iopub.status.idle": "2024-05-20T06:06:11.852202Z",
     "shell.execute_reply": "2024-05-20T06:06:11.851209Z"
    },
    "papermill": {
     "duration": 0.12207,
     "end_time": "2024-05-20T06:06:11.854369",
     "exception": false,
     "start_time": "2024-05-20T06:06:11.732299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 4, 50257])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logits = model(batch)\n",
    "logits.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "60308e5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:11.898802Z",
     "iopub.status.busy": "2024-05-20T06:06:11.898458Z",
     "iopub.status.idle": "2024-05-20T06:06:11.925576Z",
     "shell.execute_reply": "2024-05-20T06:06:11.924707Z"
    },
    "papermill": {
     "duration": 0.050497,
     "end_time": "2024-05-20T06:06:11.927556",
     "exception": false,
     "start_time": "2024-05-20T06:06:11.877059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[-0.9289,  0.2748, -0.7557,  ..., -1.6070,  0.2702, -0.5888],\n",
       "         [-0.4476,  0.1726,  0.5354,  ..., -0.3932,  1.5285,  0.8557],\n",
       "         [ 0.5680,  1.6053, -0.2155,  ...,  1.1624,  0.1380,  0.7425],\n",
       "         [ 0.0447,  2.4787, -0.8843,  ...,  1.3219, -0.0864, -0.5856]],\n",
       "\n",
       "        [[-1.5474, -0.0542, -1.0571,  ..., -1.8061, -0.4494, -0.6747],\n",
       "         [-0.8422,  0.8243, -0.1098,  ..., -0.1434,  0.2079,  1.2046],\n",
       "         [ 0.1355,  1.1858, -0.1453,  ...,  0.0869, -0.1590,  0.1552],\n",
       "         [ 0.1666, -0.8138,  0.2307,  ...,  2.5035, -0.3055, -0.3083]]],\n",
       "       grad_fn=<UnsafeViewBackward0>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edbaaefe",
   "metadata": {
    "papermill": {
     "duration": 0.019349,
     "end_time": "2024-05-20T06:06:11.966908",
     "exception": false,
     "start_time": "2024-05-20T06:06:11.947559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Normalizing activations with layer normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "494f7312",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.006985Z",
     "iopub.status.busy": "2024-05-20T06:06:12.006673Z",
     "iopub.status.idle": "2024-05-20T06:06:12.021328Z",
     "shell.execute_reply": "2024-05-20T06:06:12.020263Z"
    },
    "papermill": {
     "duration": 0.036951,
     "end_time": "2024-05-20T06:06:12.023330",
     "exception": false,
     "start_time": "2024-05-20T06:06:11.986379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch examble: \n",
      " tensor([[-0.1115,  0.1204, -0.3696, -0.2404, -1.1969],\n",
      "        [ 0.2093, -0.9724, -0.7550,  0.3239, -0.1085]])\n",
      "tensor([[0.2260, 0.3470, 0.0000, 0.2216, 0.0000, 0.0000],\n",
      "        [0.2133, 0.2394, 0.0000, 0.5198, 0.3297, 0.0000]],\n",
      "       grad_fn=<ReluBackward0>)\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "batch_example = torch.randn(2, 5)\n",
    "print('Batch examble: \\n', batch_example)\n",
    "\n",
    "layer = nn.Sequential(nn.Linear(5, 6), nn.ReLU())\n",
    "\n",
    "out = layer(batch_example)\n",
    "\n",
    "print(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5fe3d2c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.064286Z",
     "iopub.status.busy": "2024-05-20T06:06:12.064006Z",
     "iopub.status.idle": "2024-05-20T06:06:12.074040Z",
     "shell.execute_reply": "2024-05-20T06:06:12.073108Z"
    },
    "papermill": {
     "duration": 0.03282,
     "end_time": "2024-05-20T06:06:12.076028",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.043208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0.1324],\n",
      "        [0.2170]], grad_fn=<MeanBackward1>)\n",
      "tensor([[0.0231],\n",
      "        [0.0398]], grad_fn=<VarBackward0>)\n"
     ]
    }
   ],
   "source": [
    "mean = out.mean(dim=-1, keepdim=True)\n",
    "print(mean)\n",
    "\n",
    "var = out.var(dim=-1, keepdim=True)\n",
    "print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a72f00a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.119467Z",
     "iopub.status.busy": "2024-05-20T06:06:12.119195Z",
     "iopub.status.idle": "2024-05-20T06:06:12.129772Z",
     "shell.execute_reply": "2024-05-20T06:06:12.128541Z"
    },
    "papermill": {
     "duration": 0.03479,
     "end_time": "2024-05-20T06:06:12.132152",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.097362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalized layer outputs: \n",
      " tensor([[ 0.6159,  1.4126, -0.8719,  0.5872, -0.8719, -0.8719],\n",
      "        [-0.0189,  0.1121, -1.0876,  1.5173,  0.5647, -1.0876]],\n",
      "       grad_fn=<DivBackward0>)\n",
      "\n",
      "Mean: \n",
      " tensor([[9.9341e-09],\n",
      "        [1.9868e-08]], grad_fn=<MeanBackward1>)\n",
      "\n",
      "Var: \n",
      " tensor([[1.0000],\n",
      "        [1.0000]], grad_fn=<VarBackward0>)\n"
     ]
    }
   ],
   "source": [
    "out_norm = (out - mean) / torch.sqrt(var)\n",
    "mean = out_norm.mean(dim=-1, keepdim=True)\n",
    "var = out_norm.var(dim=-1, keepdim=True)\n",
    "\n",
    "print('Normalized layer outputs: \\n', out_norm)\n",
    "\n",
    "print('\\nMean: \\n', mean)\n",
    "print('\\nVar: \\n', var)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b8560a2",
   "metadata": {
    "papermill": {
     "duration": 0.021172,
     "end_time": "2024-05-20T06:06:12.174507",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.153335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A layer Normalization class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2b0d0184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.218685Z",
     "iopub.status.busy": "2024-05-20T06:06:12.217989Z",
     "iopub.status.idle": "2024-05-20T06:06:12.225079Z",
     "shell.execute_reply": "2024-05-20T06:06:12.224177Z"
    },
    "papermill": {
     "duration": 0.031312,
     "end_time": "2024-05-20T06:06:12.227134",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.195822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class LayerNorm(nn.Module):\n",
    "    def __init__(self, emb_dim):\n",
    "        super().__init__()\n",
    "        self.eps = 1e-5\n",
    "        self.scale = nn.Parameter(torch.ones(emb_dim))\n",
    "        self.shift = nn.Parameter(torch.zeros(emb_dim))        \n",
    "        \n",
    "    def forward(self, x):\n",
    "        mean = x.mean(dim=-1, keepdim=True)\n",
    "        var = x.var(dim=-1, keepdim=True, unbiased=False)\n",
    "        \n",
    "        norm_x = (x - mean) / torch.sqrt(var + self.eps)\n",
    "        return self.scale * norm_x + self.shift"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "96e64662",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.272497Z",
     "iopub.status.busy": "2024-05-20T06:06:12.271702Z",
     "iopub.status.idle": "2024-05-20T06:06:12.283254Z",
     "shell.execute_reply": "2024-05-20T06:06:12.282210Z"
    },
    "papermill": {
     "duration": 0.036103,
     "end_time": "2024-05-20T06:06:12.285418",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.249315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean: \n",
      " tensor([[-2.9802e-08],\n",
      "        [ 0.0000e+00]], grad_fn=<MeanBackward1>)\n",
      "var: \n",
      " tensor([[1.0000],\n",
      "        [1.0000]], grad_fn=<VarBackward0>)\n"
     ]
    }
   ],
   "source": [
    "ln = LayerNorm(emb_dim=5)\n",
    "out_ln = ln(batch_example)\n",
    "\n",
    "mean = out_ln.mean(dim=-1, keepdim=True)\n",
    "var = out_ln.var(dim=-1, unbiased=False, keepdim=True)\n",
    "\n",
    "print('mean: \\n', mean)\n",
    "print('var: \\n', var)"
   ]
  },
  {
   "attachments": {
    "251c4c3d-22ee-45d0-81c6-7029e525dbac.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "2a1270f2",
   "metadata": {
    "papermill": {
     "duration": 0.020632,
     "end_time": "2024-05-20T06:06:12.327381",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.306749",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# An implementation od the GELU activation function\n",
    "\n",
    "![GELU activation function.png](attachment:251c4c3d-22ee-45d0-81c6-7029e525dbac.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b486f6cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.370654Z",
     "iopub.status.busy": "2024-05-20T06:06:12.369805Z",
     "iopub.status.idle": "2024-05-20T06:06:12.375938Z",
     "shell.execute_reply": "2024-05-20T06:06:12.374947Z"
    },
    "papermill": {
     "duration": 0.030008,
     "end_time": "2024-05-20T06:06:12.378232",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.348224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GELU(nn.Module):\n",
    "    def __init__(self,):\n",
    "        super().__init__()\n",
    "        \n",
    "    \n",
    "    def forward(self, x):\n",
    "        return 0.5 * x * (1 + torch.tanh(torch.sqrt(torch.tensor(2.0 / torch.pi)) * (x + 0.044715 * torch.pow(x, 3))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3f5112b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:12.422361Z",
     "iopub.status.busy": "2024-05-20T06:06:12.422027Z",
     "iopub.status.idle": "2024-05-20T06:06:24.977504Z",
     "shell.execute_reply": "2024-05-20T06:06:24.976227Z"
    },
    "papermill": {
     "duration": 12.580571,
     "end_time": "2024-05-20T06:06:24.980063",
     "exception": false,
     "start_time": "2024-05-20T06:06:12.399492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n",
      "Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "56aeffb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:25.069659Z",
     "iopub.status.busy": "2024-05-20T06:06:25.069269Z",
     "iopub.status.idle": "2024-05-20T06:06:25.082215Z",
     "shell.execute_reply": "2024-05-20T06:06:25.081281Z"
    },
    "papermill": {
     "duration": 0.081747,
     "end_time": "2024-05-20T06:06:25.084334",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.002587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "gelu, relu = GELU(), nn.ReLU()\n",
    "x = torch.linspace(-3, 3, 100)\n",
    "\n",
    "y_gelu, y_relu = gelu(x), relu(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ba3a9c91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:25.126726Z",
     "iopub.status.busy": "2024-05-20T06:06:25.126017Z",
     "iopub.status.idle": "2024-05-20T06:06:25.728637Z",
     "shell.execute_reply": "2024-05-20T06:06:25.727705Z"
    },
    "papermill": {
     "duration": 0.626213,
     "end_time": "2024-05-20T06:06:25.731210",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.104997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 3))\n",
    "for i, (y, label) in enumerate(zip([y_gelu, y_relu], ['GELU', 'RELU']), 1):\n",
    "    plt.subplot(1, 2, i)\n",
    "    plt.plot(x, y)\n",
    "    plt.title(f'{label} activation function')\n",
    "    plt.xlabel('x')\n",
    "    plt.ylabel(f'{label}(x)')\n",
    "    plt.grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dced37ab",
   "metadata": {
    "papermill": {
     "duration": 0.02189,
     "end_time": "2024-05-20T06:06:25.775060",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.753170",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A feed forward nural network module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bacc7dfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:25.820871Z",
     "iopub.status.busy": "2024-05-20T06:06:25.820021Z",
     "iopub.status.idle": "2024-05-20T06:06:25.826368Z",
     "shell.execute_reply": "2024-05-20T06:06:25.825512Z"
    },
    "papermill": {
     "duration": 0.031653,
     "end_time": "2024-05-20T06:06:25.828285",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.796632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Linear(cfg['emb_dim'], 4 * cfg['emb_dim']),\n",
    "            GELU(),\n",
    "            nn.Linear(4 * cfg['emb_dim'], cfg['emb_dim']),\n",
    "            nn.Dropout(cfg['drop_rate'])\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "70d33f99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:25.872091Z",
     "iopub.status.busy": "2024-05-20T06:06:25.871439Z",
     "iopub.status.idle": "2024-05-20T06:06:25.927589Z",
     "shell.execute_reply": "2024-05-20T06:06:25.926536Z"
    },
    "papermill": {
     "duration": 0.08037,
     "end_time": "2024-05-20T06:06:25.929794",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.849424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[0.0351, 0.0028, 0.6470,  ..., 0.5897, 0.8112, 0.1335],\n",
      "         [0.2758, 0.6665, 0.3312,  ..., 0.7204, 0.3365, 0.9016],\n",
      "         [0.7622, 0.4008, 0.4706,  ..., 0.4857, 0.9844, 0.0499]],\n",
      "\n",
      "        [[0.8761, 0.8123, 0.2511,  ..., 0.8113, 0.3147, 0.6469],\n",
      "         [0.9920, 0.7436, 0.7393,  ..., 0.8690, 0.1667, 0.4374],\n",
      "         [0.8999, 0.0747, 0.1878,  ..., 0.0586, 0.7915, 0.8741]]])\n",
      "tensor([[[0.0351, 0.0028, 0.6470,  ..., 0.5897, 0.8112, 0.1335],\n",
      "         [0.2758, 0.6665, 0.3312,  ..., 0.7204, 0.3365, 0.9016],\n",
      "         [0.7622, 0.4008, 0.4706,  ..., 0.4857, 0.9844, 0.0499]],\n",
      "\n",
      "        [[0.8761, 0.8123, 0.2511,  ..., 0.8113, 0.3147, 0.6469],\n",
      "         [0.9920, 0.7436, 0.7393,  ..., 0.8690, 0.1667, 0.4374],\n",
      "         [0.8999, 0.0747, 0.1878,  ..., 0.0586, 0.7915, 0.8741]]])\n"
     ]
    }
   ],
   "source": [
    "ffn = FeedForward(GPT_CONFIG_124M)\n",
    "x = torch.rand(2, 3, 768)\n",
    "print(x)\n",
    "out = ffn(x)\n",
    "print(out)"
   ]
  },
  {
   "attachments": {
    "773bd9b4-7986-41dd-8c47-916bc84eacbd.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "0910b47e",
   "metadata": {
    "papermill": {
     "duration": 0.020342,
     "end_time": "2024-05-20T06:06:25.971109",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.950767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Adding shortcut connections\n",
    "\n",
    "![Screenshot from 2024-05-13 10-12-35.png](attachment:773bd9b4-7986-41dd-8c47-916bc84eacbd.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d635907a",
   "metadata": {
    "papermill": {
     "duration": 0.02049,
     "end_time": "2024-05-20T06:06:26.011803",
     "exception": false,
     "start_time": "2024-05-20T06:06:25.991313",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A newral network to illustrate shortcut connections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a7da3515",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.054231Z",
     "iopub.status.busy": "2024-05-20T06:06:26.053917Z",
     "iopub.status.idle": "2024-05-20T06:06:26.062525Z",
     "shell.execute_reply": "2024-05-20T06:06:26.061689Z"
    },
    "papermill": {
     "duration": 0.032005,
     "end_time": "2024-05-20T06:06:26.064497",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.032492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class exampleDeepNeuralNetwork(nn.Module):\n",
    "    def __init__(self, layer_size, use_shortcut):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.use_shortcut = use_shortcut\n",
    "        self.layers = nn.ModuleList(\n",
    "            [\n",
    "                nn.Sequential(nn.Linear(layer_size[0], layer_size[1]), GELU()),\n",
    "                nn.Sequential(nn.Linear(layer_size[1], layer_size[2]), GELU()),\n",
    "                nn.Sequential(nn.Linear(layer_size[2], layer_size[3]), GELU()),\n",
    "                nn.Sequential(nn.Linear(layer_size[3], layer_size[4]), GELU()),\n",
    "                nn.Sequential(nn.Linear(layer_size[4], layer_size[5]), GELU()),\n",
    "            ]     \n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        for layer in self.layers:\n",
    "            # compute the output of the current layer\n",
    "            layer_output = layer(x)\n",
    "            \n",
    "            # check if shortcut can be applied\n",
    "            if self.use_shortcut and x.size() == layer_output.size():\n",
    "                x = x + layer_output\n",
    "            else:\n",
    "                x = layer_output\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d5c3f75f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.106022Z",
     "iopub.status.busy": "2024-05-20T06:06:26.105748Z",
     "iopub.status.idle": "2024-05-20T06:06:26.114201Z",
     "shell.execute_reply": "2024-05-20T06:06:26.113528Z"
    },
    "papermill": {
     "duration": 0.031336,
     "end_time": "2024-05-20T06:06:26.116069",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.084733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "layer_sizes = [3, 3, 3, 3, 3, 1]\n",
    "sample_input = torch.tensor([[1., 0., -1.]])\n",
    "\n",
    "torch.manual_seed(123)\n",
    "model_without_shortcut = exampleDeepNeuralNetwork(layer_sizes, use_shortcut=False)\n",
    "torch.manual_seed(123)\n",
    "model_with_shortcut = exampleDeepNeuralNetwork(layer_sizes, use_shortcut=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14495b2a",
   "metadata": {
    "papermill": {
     "duration": 0.023223,
     "end_time": "2024-05-20T06:06:26.159886",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.136663",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# compute gradients in the models backward pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "32bfc5a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.202120Z",
     "iopub.status.busy": "2024-05-20T06:06:26.201745Z",
     "iopub.status.idle": "2024-05-20T06:06:26.208275Z",
     "shell.execute_reply": "2024-05-20T06:06:26.207349Z"
    },
    "papermill": {
     "duration": 0.030018,
     "end_time": "2024-05-20T06:06:26.210267",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.180249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def print_gradients(model, x):\n",
    "    # forward pass\n",
    "    output = model(x)\n",
    "    target = torch.tensor([0.])\n",
    "    \n",
    "    # calculate loss based on how close the target and output are\n",
    "    loss = nn.MSELoss()\n",
    "    loss = loss(output, target)\n",
    "    \n",
    "    # Backward pass to calculate the gradients\n",
    "    loss.backward()\n",
    "    \n",
    "    for name, param in model.named_parameters():\n",
    "        if 'weight' in name:\n",
    "            # print the mean absolute gradient of the weights\n",
    "            print(f'{name} has gradient mean of {param.grad.abs().mean().item()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6345b1aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.254705Z",
     "iopub.status.busy": "2024-05-20T06:06:26.254352Z",
     "iopub.status.idle": "2024-05-20T06:06:26.363891Z",
     "shell.execute_reply": "2024-05-20T06:06:26.362916Z"
    },
    "papermill": {
     "duration": 0.135185,
     "end_time": "2024-05-20T06:06:26.367393",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.232208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "layers.0.0.weight has gradient mean of 0.00020173584925942123\n",
      "layers.1.0.weight has gradient mean of 0.00012011159560643137\n",
      "layers.2.0.weight has gradient mean of 0.0007152040489017963\n",
      "layers.3.0.weight has gradient mean of 0.0013988736318424344\n",
      "layers.4.0.weight has gradient mean of 0.005049645435065031\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/nn/modules/loss.py:535: UserWarning: Using a target size (torch.Size([1])) that is different to the input size (torch.Size([1, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n",
      "  return F.mse_loss(input, target, reduction=self.reduction)\n"
     ]
    }
   ],
   "source": [
    "print_gradients(model_without_shortcut, sample_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4d8ac67d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.415629Z",
     "iopub.status.busy": "2024-05-20T06:06:26.414939Z",
     "iopub.status.idle": "2024-05-20T06:06:26.422197Z",
     "shell.execute_reply": "2024-05-20T06:06:26.421223Z"
    },
    "papermill": {
     "duration": 0.032003,
     "end_time": "2024-05-20T06:06:26.424229",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.392226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "layers.0.0.weight has gradient mean of 0.22169792652130127\n",
      "layers.1.0.weight has gradient mean of 0.20694108307361603\n",
      "layers.2.0.weight has gradient mean of 0.3289699852466583\n",
      "layers.3.0.weight has gradient mean of 0.2665732204914093\n",
      "layers.4.0.weight has gradient mean of 1.3258541822433472\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print_gradients(model_with_shortcut, sample_input)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f4e9381",
   "metadata": {
    "papermill": {
     "duration": 0.021316,
     "end_time": "2024-05-20T06:06:26.466218",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.444902",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Connecting attention and linear layers in a transformer block"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8793c344",
   "metadata": {
    "papermill": {
     "duration": 0.021307,
     "end_time": "2024-05-20T06:06:26.508308",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.487001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Multi-head attention layer:\n",
    "\n",
    "\n",
    "[more](https://www.kaggle.com/code/golammostofas/details-attention-mechanism-for-llm#4.2-An-Efficent-Multi-head-attention-class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f7ed83f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.552224Z",
     "iopub.status.busy": "2024-05-20T06:06:26.551753Z",
     "iopub.status.idle": "2024-05-20T06:06:26.564288Z",
     "shell.execute_reply": "2024-05-20T06:06:26.563417Z"
    },
    "papermill": {
     "duration": 0.036786,
     "end_time": "2024-05-20T06:06:26.566231",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.529445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MultiHeadAttention(nn.Module):\n",
    "    def __init__(self, d_in, d_out, block_size, dropout, num_heads, qkv_bias=False):\n",
    "        super().__init__()\n",
    "        assert d_out % num_heads == 0 # d_out must be divisible by n_heads\n",
    "        \n",
    "        self.d_out = d_out\n",
    "        self.num_heads = num_heads\n",
    "        self.head_dim = d_out // num_heads\n",
    "        self.W_query = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        self.W_key = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        self.W_value = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
    "        \n",
    "        self.out_proj = nn.Linear(d_out, d_out)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        self.register_buffer(\n",
    "            'mask',\n",
    "            torch.triu(torch.ones(block_size, block_size), diagonal=1)\n",
    "        )\n",
    "        \n",
    "        \n",
    "    def forward(self, x):\n",
    "        b, num_tokens, d_in = x.shape\n",
    "        \n",
    "        queries = self.W_query(x)\n",
    "        keys = self.W_key(x)\n",
    "        values = self.W_value(x)\n",
    "        \n",
    "        keys = keys.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        queries = queries.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        values = values.view(b, num_tokens, self.num_heads, self.head_dim)\n",
    "        \n",
    "        keys = keys.transpose(1, 2)\n",
    "        queries = queries.transpose(1, 2)\n",
    "        values = values.transpose(1, 2)\n",
    "        \n",
    "        attn_scores = queries @ keys.transpose(2, 3)\n",
    "        \n",
    "        mask_bool = self.mask.bool()[:num_tokens, :num_tokens]\n",
    "        mask_unsqueezed = mask_bool.unsqueeze(0).unsqueeze(0)\n",
    "        attn_scores.masked_fill_(mask_unsqueezed, -torch.inf)\n",
    "        \n",
    "        attn_weights = torch.softmax(attn_scores / keys.shape[-1] ** 0.5, dim=-1)\n",
    "        \n",
    "        attn_weights = self.dropout(attn_weights)\n",
    "        \n",
    "        context_vec = (attn_weights @ values).transpose(1, 2)\n",
    "        context_vec = context_vec.contiguous().view(b, num_tokens, self.d_out)\n",
    "        context_vec = self.out_proj(context_vec)\n",
    "        \n",
    "        return context_vec"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c855d504",
   "metadata": {
    "papermill": {
     "duration": 0.021373,
     "end_time": "2024-05-20T06:06:26.608723",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.587350",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## the transformer block components of GPT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bf68b73c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.652627Z",
     "iopub.status.busy": "2024-05-20T06:06:26.651866Z",
     "iopub.status.idle": "2024-05-20T06:06:26.659993Z",
     "shell.execute_reply": "2024-05-20T06:06:26.659150Z"
    },
    "papermill": {
     "duration": 0.031781,
     "end_time": "2024-05-20T06:06:26.662021",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.630240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerBlock(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.att = MultiHeadAttention(\n",
    "            d_in=cfg['emb_dim'],\n",
    "            d_out=cfg['emb_dim'],\n",
    "            block_size=cfg['ctx_len'],\n",
    "            num_heads=cfg['n_heads'],\n",
    "            dropout=cfg['drop_rate'],\n",
    "            qkv_bias=cfg['qkv_bias'],\n",
    "        )\n",
    "        \n",
    "        self.ff = FeedForward(cfg)\n",
    "        self.norm1 = LayerNorm(cfg['emb_dim'])\n",
    "        self.norm2 = LayerNorm(cfg['emb_dim'])\n",
    "        self.drop_resid = nn.Dropout(cfg['drop_rate'])\n",
    "    \n",
    "    def forward(self, x):\n",
    "        shortcut = x\n",
    "        x = self.norm1(x)\n",
    "        x = self.att(x)\n",
    "        x = self.drop_resid(x)\n",
    "        x = x + shortcut # Add the original input back\n",
    "        \n",
    "        shortcut = x\n",
    "        x = self.norm2(x)\n",
    "        x = self.ff(x)\n",
    "        x = self.drop_resid(x)\n",
    "        x = x + shortcut\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "19925e26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.707589Z",
     "iopub.status.busy": "2024-05-20T06:06:26.706843Z",
     "iopub.status.idle": "2024-05-20T06:06:26.807625Z",
     "shell.execute_reply": "2024-05-20T06:06:26.806704Z"
    },
    "papermill": {
     "duration": 0.126419,
     "end_time": "2024-05-20T06:06:26.810046",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.683627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([2, 4, 768]), torch.Size([2, 4, 768]))"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "x = torch.rand(2, 4, 768)\n",
    "block = TransformerBlock(GPT_CONFIG_124M)\n",
    "output = block(x)\n",
    "\n",
    "x.shape, output.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c4120cb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.857990Z",
     "iopub.status.busy": "2024-05-20T06:06:26.857662Z",
     "iopub.status.idle": "2024-05-20T06:06:26.864785Z",
     "shell.execute_reply": "2024-05-20T06:06:26.863940Z"
    },
    "papermill": {
     "duration": 0.032541,
     "end_time": "2024-05-20T06:06:26.866884",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.834343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[0.2961, 0.5166, 0.2517,  ..., 0.9541, 0.8567, 0.4604],\n",
       "         [0.2238, 0.3047, 0.3019,  ..., 0.5465, 0.4532, 0.7598],\n",
       "         [0.6945, 0.2478, 0.4111,  ..., 0.8838, 0.4898, 0.5963],\n",
       "         [0.0890, 0.7804, 0.9223,  ..., 0.4507, 0.6357, 0.5833]],\n",
       "\n",
       "        [[0.5716, 0.9297, 0.3396,  ..., 0.0477, 0.4564, 0.2797],\n",
       "         [0.0936, 0.2211, 0.3806,  ..., 0.3948, 0.4545, 0.4536],\n",
       "         [0.6788, 0.1741, 0.2084,  ..., 0.5557, 0.5930, 0.0959],\n",
       "         [0.3894, 0.4083, 0.0662,  ..., 0.9861, 0.9341, 0.1319]]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ae80a7be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:26.912092Z",
     "iopub.status.busy": "2024-05-20T06:06:26.911448Z",
     "iopub.status.idle": "2024-05-20T06:06:26.918854Z",
     "shell.execute_reply": "2024-05-20T06:06:26.917990Z"
    },
    "papermill": {
     "duration": 0.031982,
     "end_time": "2024-05-20T06:06:26.921025",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.889043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[ 0.0436,  0.9909, -1.1247,  ...,  2.9208,  0.6655,  1.1553],\n",
       "         [-0.4972, -0.5673,  0.2529,  ...,  0.4698, -1.3401,  1.9655],\n",
       "         [ 0.5532,  0.1300, -0.6734,  ...,  2.2732, -0.5948,  1.5010],\n",
       "         [-1.3288,  1.3465,  1.6703,  ..., -1.3565,  0.5479,  1.4464]],\n",
       "\n",
       "        [[-1.1309,  1.1682, -0.1530,  ..., -1.0826, -0.1736, -2.3772],\n",
       "         [-1.9234,  0.4227,  0.4753,  ...,  0.1477,  1.3105, -0.9162],\n",
       "         [ 0.9653, -1.0681, -0.3272,  ..., -0.1399,  1.0281, -3.0106],\n",
       "         [ 0.8465, -0.7113, -1.3693,  ...,  2.5875,  2.2315, -0.9354]]],\n",
       "       grad_fn=<AddBackward0>)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "208a18ca",
   "metadata": {
    "papermill": {
     "duration": 0.021801,
     "end_time": "2024-05-20T06:06:26.965302",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.943501",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# The GPT model architecture implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c858d85d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:27.011258Z",
     "iopub.status.busy": "2024-05-20T06:06:27.010919Z",
     "iopub.status.idle": "2024-05-20T06:06:27.019886Z",
     "shell.execute_reply": "2024-05-20T06:06:27.019021Z"
    },
    "papermill": {
     "duration": 0.034348,
     "end_time": "2024-05-20T06:06:27.021863",
     "exception": false,
     "start_time": "2024-05-20T06:06:26.987515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GPTModel(nn.Module):\n",
    "    def __init__(self, cfg):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.tok_emb = nn.Embedding(cfg['vocab_size'], cfg['emb_dim'])\n",
    "        self.pos_emb = nn.Embedding(cfg['ctx_len'], cfg['emb_dim'])\n",
    "        self.drop_emb = nn.Dropout(cfg['drop_rate'])\n",
    "        \n",
    "        self.trf_blocks = nn.Sequential(\n",
    "            *[TransformerBlock(cfg) for _ in range(cfg['n_layers'])]\n",
    "        )                                                                                   #A\n",
    "        \n",
    "        self.final_norm = LayerNorm(cfg['emb_dim'])                                        #B\n",
    "        self.out_head = nn.Linear(cfg['emb_dim'], cfg['vocab_size'], bias=False)\n",
    "        \n",
    "        \n",
    "    def forward(self, in_idx):\n",
    "        batch_size, seq_len = in_idx.shape\n",
    "        tok_embeds = self.tok_emb(in_idx)\n",
    "        pos_embeds = self.pos_emb(torch.arange(seq_len, device=in_idx.device))\n",
    "\n",
    "        x = tok_embeds + pos_embeds\n",
    "        x = self.drop_emb(x)\n",
    "        x = self.trf_blocks(x)\n",
    "        x = self.final_norm(x)\n",
    "        logits = self.out_head(x)\n",
    "\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "32aec8d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:27.065414Z",
     "iopub.status.busy": "2024-05-20T06:06:27.065110Z",
     "iopub.status.idle": "2024-05-20T06:06:27.071195Z",
     "shell.execute_reply": "2024-05-20T06:06:27.070345Z"
    },
    "papermill": {
     "duration": 0.030085,
     "end_time": "2024-05-20T06:06:27.073162",
     "exception": false,
     "start_time": "2024-05-20T06:06:27.043077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[6109, 3626, 6100,  345],\n",
       "        [6109, 1110, 6622,  257]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8b07b373",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:27.117765Z",
     "iopub.status.busy": "2024-05-20T06:06:27.117432Z",
     "iopub.status.idle": "2024-05-20T06:06:28.919672Z",
     "shell.execute_reply": "2024-05-20T06:06:28.918627Z"
    },
    "papermill": {
     "duration": 1.827187,
     "end_time": "2024-05-20T06:06:28.921981",
     "exception": false,
     "start_time": "2024-05-20T06:06:27.094794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([2, 4, 50257])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "model = GPTModel(GPT_CONFIG_124M)\n",
    "\n",
    "out = model(batch)\n",
    "out.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "398a24fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:28.971090Z",
     "iopub.status.busy": "2024-05-20T06:06:28.970421Z",
     "iopub.status.idle": "2024-05-20T06:06:28.978157Z",
     "shell.execute_reply": "2024-05-20T06:06:28.977316Z"
    },
    "papermill": {
     "duration": 0.033458,
     "end_time": "2024-05-20T06:06:28.980252",
     "exception": false,
     "start_time": "2024-05-20T06:06:28.946794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[[ 0.0888,  0.0954,  0.6679,  ..., -0.0268, -0.2485,  0.1545],\n",
       "         [ 0.9819, -0.4323, -0.5889,  ..., -0.3826, -0.3598,  0.3161],\n",
       "         [ 0.2039,  0.1102, -0.2851,  ...,  0.2074, -0.4397, -0.0163],\n",
       "         [-0.2754,  0.2518, -0.7969,  ...,  1.1094,  0.2322, -0.3492]],\n",
       "\n",
       "        [[ 0.1464,  0.0638,  0.2443,  ..., -0.2939, -0.1199,  0.1395],\n",
       "         [ 0.3025,  0.1508, -0.5634,  ...,  0.9068, -0.2649,  0.7642],\n",
       "         [ 0.8481,  0.6492, -0.7195,  ...,  0.3698,  0.1706,  0.2942],\n",
       "         [ 0.2073, -0.1117,  0.4492,  ...,  1.3538, -0.4277,  0.4777]]],\n",
       "       grad_fn=<UnsafeViewBackward0>)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b74efb3f",
   "metadata": {
    "papermill": {
     "duration": 0.022461,
     "end_time": "2024-05-20T06:06:29.025427",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.002966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Analysis Model Architecture and Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "29f49669",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.071031Z",
     "iopub.status.busy": "2024-05-20T06:06:29.070477Z",
     "iopub.status.idle": "2024-05-20T06:06:29.077544Z",
     "shell.execute_reply": "2024-05-20T06:06:29.076712Z"
    },
    "papermill": {
     "duration": 0.032054,
     "end_time": "2024-05-20T06:06:29.079587",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.047533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "163009536"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_params = sum(p.numel() for p in model.parameters())\n",
    "\n",
    "total_params"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cea8c8e3",
   "metadata": {
    "papermill": {
     "duration": 0.021591,
     "end_time": "2024-05-20T06:06:29.123543",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.101952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Curious we spoke of ninitializing a 124 million parameter CPT model so why is the actial number of parameters 163 million, as shown in the preceding code output?\n",
    "\n",
    "\n",
    "The reason is a concept called weight tying that is used in the original GPT-2 architecture, which means that the original GPT - 2 architecture is reusing the token embedding layer as its output layer. \n",
    "To understand what this means, let's take a look at the shapes of the token embedding layer and linear output layer that we initialized on the model via the GPTModel earlier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "60d0acc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.169783Z",
     "iopub.status.busy": "2024-05-20T06:06:29.169464Z",
     "iopub.status.idle": "2024-05-20T06:06:29.174507Z",
     "shell.execute_reply": "2024-05-20T06:06:29.173592Z"
    },
    "papermill": {
     "duration": 0.030633,
     "end_time": "2024-05-20T06:06:29.176743",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.146110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Token embedding layer shape:  torch.Size([50257, 768])\n",
      "Out layer shape:  torch.Size([50257, 768])\n"
     ]
    }
   ],
   "source": [
    "print('Token embedding layer shape: ', model.tok_emb.weight.shape)\n",
    "print('Out layer shape: ', model.out_head.weight.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09f12fac",
   "metadata": {
    "papermill": {
     "duration": 0.02152,
     "end_time": "2024-05-20T06:06:29.219648",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.198128",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see based on the print outputs, the weight tensors for both these layers have the same shape.\n",
    "\n",
    "\n",
    "The token embedding and output layers are vary large due to the number of rows for the 50,257 in the tokenizer's vocabulary. Let's remove the output layer parameter count from the total GPT-2 model count according to the weight typing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a8d5c3d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.266238Z",
     "iopub.status.busy": "2024-05-20T06:06:29.265948Z",
     "iopub.status.idle": "2024-05-20T06:06:29.271079Z",
     "shell.execute_reply": "2024-05-20T06:06:29.270219Z"
    },
    "papermill": {
     "duration": 0.03187,
     "end_time": "2024-05-20T06:06:29.273445",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.241575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trainable parameters considering weight tying:  124412160\n"
     ]
    }
   ],
   "source": [
    "total_params_gpt2 = total_params - sum(p.numel() for p in model.out_head.parameters())\n",
    "print(f'Number of trainable parameters considering weight tying: ', total_params_gpt2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bafc42d4",
   "metadata": {
    "papermill": {
     "duration": 0.022885,
     "end_time": "2024-05-20T06:06:29.318145",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.295260",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As we can see, the model is now only 124 million parameters large, matching the original size of the GPT-2 model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bd54213",
   "metadata": {
    "papermill": {
     "duration": 0.021851,
     "end_time": "2024-05-20T06:06:29.362925",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.341074",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Compute the memory requirements of the 163 million parameters in our GPTModel object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f782f824",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.408562Z",
     "iopub.status.busy": "2024-05-20T06:06:29.408247Z",
     "iopub.status.idle": "2024-05-20T06:06:29.413215Z",
     "shell.execute_reply": "2024-05-20T06:06:29.412346Z"
    },
    "papermill": {
     "duration": 0.030037,
     "end_time": "2024-05-20T06:06:29.415338",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.385301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total size of the model:  621.00 MB\n"
     ]
    }
   ],
   "source": [
    "total_size_bytes = total_params * 4\n",
    "total_size_mb = total_size_bytes // (1024 * 1024)\n",
    "\n",
    "print(f'Total size of the model: {total_size_mb: .2f} MB')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1291bf",
   "metadata": {
    "papermill": {
     "duration": 0.022626,
     "end_time": "2024-05-20T06:06:29.460235",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.437609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Implement the token generation process as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "941792ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.506905Z",
     "iopub.status.busy": "2024-05-20T06:06:29.506510Z",
     "iopub.status.idle": "2024-05-20T06:06:29.513296Z",
     "shell.execute_reply": "2024-05-20T06:06:29.512401Z"
    },
    "papermill": {
     "duration": 0.032358,
     "end_time": "2024-05-20T06:06:29.515377",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.483019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_text_simple(model, idx, max_new_tokens, context_size):\n",
    "    while max_new_tokens:\n",
    "        idx_cond = idx[:, -context_size:]\n",
    "        print(idx_cond)\n",
    "        with torch.no_grad():\n",
    "            logits = model(idx_cond)\n",
    "        \n",
    "        logits = logits[:, -1, :]\n",
    "        probas = torch.softmax(logits, dim=-1)\n",
    "        idx_next = torch.argmax(probas, dim=-1, keepdim=True)\n",
    "        \n",
    "        idx = torch.cat((idx, idx_next), dim=1)\n",
    "        \n",
    "        max_new_tokens -= 1\n",
    "    \n",
    "    return idx\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "287556d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.563441Z",
     "iopub.status.busy": "2024-05-20T06:06:29.563109Z",
     "iopub.status.idle": "2024-05-20T06:06:29.727168Z",
     "shell.execute_reply": "2024-05-20T06:06:29.725822Z"
    },
    "papermill": {
     "duration": 0.190903,
     "end_time": "2024-05-20T06:06:29.729705",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.538802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['[CLS]', '_H', 'ell', 'o,_', 'i', '_am', '[SEP]']\n",
      "[1, 185, 218, 354, 65, 384, 2]\n"
     ]
    }
   ],
   "source": [
    "from tokenizers import Tokenizer\n",
    "\n",
    "# Load the tokenizer\n",
    "tokenizer = Tokenizer.from_file(\"/kaggle/input/tokenism/custom_tokenizer.json\")\n",
    "\n",
    "start_context = 'Hello, i am'\n",
    "\n",
    "# Encode some text\n",
    "encoded = tokenizer.encode(start_context)\n",
    "\n",
    "# Print the tokens and IDs\n",
    "print(encoded.tokens)\n",
    "print(encoded.ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7fe8f272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.779675Z",
     "iopub.status.busy": "2024-05-20T06:06:29.778805Z",
     "iopub.status.idle": "2024-05-20T06:06:29.785467Z",
     "shell.execute_reply": "2024-05-20T06:06:29.784628Z"
    },
    "papermill": {
     "duration": 0.033708,
     "end_time": "2024-05-20T06:06:29.787538",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.753830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 7])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoded_tensor = torch.tensor(encoded.ids).unsqueeze(0)\n",
    "encoded_tensor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b41786e8",
   "metadata": {
    "_kg_hide-input": false,
    "_kg_hide-output": true,
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.836709Z",
     "iopub.status.busy": "2024-05-20T06:06:29.836075Z",
     "iopub.status.idle": "2024-05-20T06:06:29.846054Z",
     "shell.execute_reply": "2024-05-20T06:06:29.845202Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 0.036921,
     "end_time": "2024-05-20T06:06:29.848386",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.811465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GPTModel(\n",
       "  (tok_emb): Embedding(50257, 768)\n",
       "  (pos_emb): Embedding(1024, 768)\n",
       "  (drop_emb): Dropout(p=0.1, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (1): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (2): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (3): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (4): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (5): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (6): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (7): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (8): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (9): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (10): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "    (11): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_key): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (W_value): Linear(in_features=768, out_features=768, bias=False)\n",
       "        (out_proj): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=3072, out_features=768, bias=True)\n",
       "          (3): Dropout(p=0.1, inplace=False)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_resid): Dropout(p=0.1, inplace=False)\n",
       "    )\n",
       "  )\n",
       "  (final_norm): LayerNorm()\n",
       "  (out_head): Linear(in_features=768, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "230027d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:29.897569Z",
     "iopub.status.busy": "2024-05-20T06:06:29.897279Z",
     "iopub.status.idle": "2024-05-20T06:06:30.275760Z",
     "shell.execute_reply": "2024-05-20T06:06:30.274803Z"
    },
    "papermill": {
     "duration": 0.405925,
     "end_time": "2024-05-20T06:06:30.277985",
     "exception": false,
     "start_time": "2024-05-20T06:06:29.872060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[  1, 185, 218, 354,  65, 384,   2]])\n",
      "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567]])\n",
      "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567, 21945]])\n",
      "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567, 21945,  3528]])\n",
      "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567, 21945,  3528,\n",
      "         15969]])\n",
      "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567, 21945,  3528,\n",
      "         15969,  8174]])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "tensor([[    1,   185,   218,   354,    65,   384,     2, 24567, 21945,  3528,\n",
       "         15969,  8174, 29292]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.eval()\n",
    "out = generate_text_simple(\n",
    "    model=model,\n",
    "    idx=encoded_tensor,\n",
    "    max_new_tokens=6,\n",
    "    context_size=GPT_CONFIG_124M['ctx_len']\n",
    ")\n",
    "\n",
    "out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c3a3f5cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:30.332846Z",
     "iopub.status.busy": "2024-05-20T06:06:30.331944Z",
     "iopub.status.idle": "2024-05-20T06:06:30.338357Z",
     "shell.execute_reply": "2024-05-20T06:06:30.337474Z"
    },
    "papermill": {
     "duration": 0.035956,
     "end_time": "2024-05-20T06:06:30.340587",
     "exception": false,
     "start_time": "2024-05-20T06:06:30.304631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(out[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8215a763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T06:06:30.392411Z",
     "iopub.status.busy": "2024-05-20T06:06:30.392093Z",
     "iopub.status.idle": "2024-05-20T06:06:30.398539Z",
     "shell.execute_reply": "2024-05-20T06:06:30.397599Z"
    },
    "papermill": {
     "duration": 0.034629,
     "end_time": "2024-05-20T06:06:30.400533",
     "exception": false,
     "start_time": "2024-05-20T06:06:30.365904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\" Hello, i am An hour but married, Tybalt  through all the vein Lea Ay, so I fears ag Run to my study.--By and by.--God's \""
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decoded_text = tokenizer.decode(out[0].tolist())\n",
    "decoded_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c38935e",
   "metadata": {
    "papermill": {
     "duration": 0.024691,
     "end_time": "2024-05-20T06:06:30.450790",
     "exception": false,
     "start_time": "2024-05-20T06:06:30.426099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0acf1437",
   "metadata": {
    "papermill": {
     "duration": 0.024523,
     "end_time": "2024-05-20T06:06:30.500028",
     "exception": false,
     "start_time": "2024-05-20T06:06:30.475505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5039258,
     "sourceId": 8455276,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43.051971,
   "end_time": "2024-05-20T06:06:31.645854",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-20T06:05:48.593883",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
